<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Brooke's Notes]]></title>
  <link href="https://www.yangyang.cloud/atom.xml" rel="self"/>
  <link href="https://www.yangyang.cloud/"/>
  <updated>2019-12-20T18:02:22+08:00</updated>
  <id>https://www.yangyang.cloud/</id>
  <author>
    <name><![CDATA[BrookeYang(杨阳)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux Seccomp Filters]]></title>
    <link href="https://www.yangyang.cloud/blog/2019/12/12/linux-seccomp-filters/"/>
    <updated>2019-12-12T22:20:45+08:00</updated>
    <id>https://www.yangyang.cloud/blog/2019/12/12/linux-seccomp-filters</id>
    <content type="html"><![CDATA[<h2>Overview</h2>

<p>Seccomp (short for Secure Computing mode) is a computer security facility in the Linux kernel. It was merged into the Linux kernel mainline in kernel version 2.6.12, which was released on March 8, 2005. Seccomp allows a process to make a one-way transition into a &ldquo;secure&rdquo; state in which it cannot make some system calls. If it attempts, the kernel will terminate the process tith SIGSYS. It is used in many sandbox-like applications (i.e. Chrome/Chromium, Firefox, Docker, QEMU, Android, Systemd, OpenSSH&hellip;) for resource isolation purposes.</p>

<h2>Basic example</h2>

<p>Question: How to block specified syscalls?</p>

<p>First off, we need header files to use libseccomp2. Get the package installed:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apt install libseccomp-dev</span></code></pre></td></tr></table></div></figure>


<p>The following code (function <em>filter_syscalls()</em>) shows how we use seccomp in common. It filters the <code>fchmodat</code> and <code>symlinkat</code> syscalls. And also blocks <code>write</code> syscall, if the write count argument exceeds 2048.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// ... other headers and macros ommited
</span><span class='line'>#include &lt;seccomp.h&gt;
</span><span class='line'>
</span><span class='line'>int filter_syscalls() {
</span><span class='line'>    int ret = -1;
</span><span class='line'>    scmp_filter_ctx ctx;
</span><span class='line'>
</span><span class='line'>    log_debug("filtering syscalls...");
</span><span class='line'>    ctx = seccomp_init(SCMP_ACT_ALLOW);
</span><span class='line'>    if (!ctx) { log_error("error seccomp ctx init"); return ret; }
</span><span class='line'>
</span><span class='line'>    // prohibits specified syscall
</span><span class='line'>    ret = seccomp_rule_add(ctx, SCMP_ACT_KILL, SCMP_SYS(fchmodat), 0);
</span><span class='line'>    if (ret &lt; 0) { log_error("error seccomp rule add: fchmodat"); goto out; }
</span><span class='line'>
</span><span class='line'>    ret = seccomp_rule_add(ctx, SCMP_ACT_KILL, SCMP_SYS(symlinkat), 0);
</span><span class='line'>    if (ret &lt; 0) { log_error("error seccomp rule add: symlinkat"); goto out; }
</span><span class='line'>
</span><span class='line'>    // limit syscall arguments
</span><span class='line'>    ret = seccomp_rule_add(ctx, SCMP_ACT_KILL, SCMP_SYS(write), 1,
</span><span class='line'>            SCMP_A2_64(SCMP_CMP_GT, 2048));
</span><span class='line'>    if (ret &lt; 0) { log_error("error seccomp rule add: write"); goto out; }
</span><span class='line'>
</span><span class='line'>    ret = seccomp_load(ctx);
</span><span class='line'>    if (ret &lt; 0) { log_error("error seccomp load"); goto out; }
</span><span class='line'>
</span><span class='line'>out:
</span><span class='line'>    seccomp_release(ctx);
</span><span class='line'>    if (ret != 0) return -1;
</span><span class='line'>
</span><span class='line'>    return 0;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>extern char **environ;
</span><span class='line'>
</span><span class='line'>int main(int argc, char *argv[]) {
</span><span class='line'>    int ret = -1;
</span><span class='line'>
</span><span class='line'>    ret = filter_syscalls();
</span><span class='line'>    if (ret != 0) { log_error("filter syscall failed"); return EXIT_FAILURE; }
</span><span class='line'>
</span><span class='line'>    char *prog = "/bin/bash";
</span><span class='line'>    ret = execve(prog, (char *[]){prog, 0}, environ);
</span><span class='line'>    log_debug("%d", ret);
</span><span class='line'>    if (ret &lt; 0) { log_error("exec failed"); return EXIT_FAILURE; }
</span><span class='line'>
</span><span class='line'>    return EXIT_SUCCESS;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>For all source code &amp; detail, check <a href="https://github.com/Pro-YY/seccomp-demo">here</a>.</p>

<p>Note: compile the above with <code>-lseccomp</code> flags, and run it when we get our secured shell.</p>

<p>Then, play with it with the execed bash prompt:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>brooke@VM-250-12-ubuntu:~/seccomp_demo$ gcc seccomp_basic.c -l seccomp && ./a.out
</span><span class='line'>[DEBUG]seccomp_basic.c: 32: filtering syscalls...
</span><span class='line'>brooke@VM-250-12-ubuntu:~/seccomp_demo$ chmod -x a.out    # test fchmodat
</span><span class='line'>Bad system call (core dumped)
</span><span class='line'>brooke@VM-250-12-ubuntu:~/seccomp_demo$ ln -s a.out       # test symlinkat
</span><span class='line'>Bad system call (core dumped)
</span><span class='line'>brooke@VM-250-12-ubuntu:~/seccomp_demo$ echo "hello"      # test write
</span><span class='line'>hello
</span><span class='line'>brooke@VM-250-12-ubuntu:~/seccomp_demo$ cat seccomp_basic.c   # test write
</span><span class='line'>Bad system call (core dumped)
</span><span class='line'>
</span><span class='line'>brooke@VM-250-12-ubuntu:~/seccomp_demo$ cat /proc/$$/status
</span><span class='line'>...
</span><span class='line'>NoNewPrivs:     1     # cannot be applied to child processes with greater privileges
</span><span class='line'>Seccomp:        2     # Seccomp filter mode
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>brooke@VM-250-12-ubuntu:~/seccomp_demo$ sudo ls
</span><span class='line'>sudo: effective uid is not 0, is /usr/bin/sudo on a file system with the 'nosuid' option set or an NFS file system without root privileges?
</span><span class='line'>brooke@VM-250-12-ubuntu:~/seccomp_demo$ exit  # Don't forget quit bash</span></code></pre></td></tr></table></div></figure>


<p>As expected, the process (subprocess) invoke filtered syscall get SIGSYS, and core-dumped.</p>

<h2>Export filter&rsquo;s bpf</h2>

<p>Underneath, seccomp performs filtering by using bpf, which we&rsquo;ll explain later. The libseccomp provide useful funcitons to generate and output the corresponding bpf as well as pfc (Pseudo Filter Code). Thus we can take a more close look.</p>

<p>For a trival case, we only filter the <code>fchmodat</code> syscall, and export bpf:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int filter_syscalls() {
</span><span class='line'>    int ret = -1;
</span><span class='line'>    scmp_filter_ctx ctx;
</span><span class='line'>
</span><span class='line'>    log_debug("filtering syscalls...");
</span><span class='line'>    ctx = seccomp_init(SCMP_ACT_ALLOW);
</span><span class='line'>    if (!ctx) { log_error("error seccomp ctx init"); return ret; }
</span><span class='line'>
</span><span class='line'>    // prohibits specified syscall
</span><span class='line'>    ret = seccomp_rule_add(ctx, SCMP_ACT_KILL, SCMP_SYS(fchmodat), 0);
</span><span class='line'>    if (ret &lt; 0) { log_error("error seccomp rule add: fchmodat"); goto out; }
</span><span class='line'>
</span><span class='line'>    ret = seccomp_load(ctx);
</span><span class='line'>    if (ret &lt; 0) { log_error("error seccomp load"); goto out; }
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>    // export bpf
</span><span class='line'>    int bpf_fd = open("seccomp_filter.bpf", O_CREAT | O_WRONLY | O_TRUNC, 0666);
</span><span class='line'>    if (bpf_fd == -1) { log_error("error open"); goto out; }
</span><span class='line'>    ret = seccomp_export_bpf(ctx, bpf_fd);
</span><span class='line'>    if (ret &lt; 0) { log_error("error export"); goto out; }
</span><span class='line'>    close(bpf_fd);
</span><span class='line'>
</span><span class='line'>    // export pfc
</span><span class='line'>    int pfc_fd = open("seccomp_filter.pfc", O_CREAT | O_WRONLY | O_TRUNC, 0666);
</span><span class='line'>    if (pfc_fd == -1) { log_error("error open"); goto out; }
</span><span class='line'>    ret = seccomp_export_pfc(ctx, pfc_fd);
</span><span class='line'>    if (ret &lt; 0) { log_error("error export"); goto out; }
</span><span class='line'>    close(pfc_fd);
</span><span class='line'>
</span><span class='line'>out:
</span><span class='line'>    seccomp_release(ctx);
</span><span class='line'>    if (ret != 0) return -1;
</span><span class='line'>
</span><span class='line'>    return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>We got 2 files, bpf and pfc:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ hd seccomp_filter.bpf      # hexdump bpf file
</span><span class='line'>00000000  20 00 00 00 04 00 00 00  15 00 00 05 3e 00 00 c0  | ...........&gt;...|
</span><span class='line'>00000010  20 00 00 00 00 00 00 00  35 00 00 01 00 00 00 40  | .......5......@|
</span><span class='line'>00000020  15 00 00 02 ff ff ff ff  15 00 01 00 0c 01 00 00  |................|
</span><span class='line'>00000030  06 00 00 00 00 00 ff 7f  06 00 00 00 00 00 00 00  |................|
</span><span class='line'>00000040</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ cat seccomp_filter.pfc
</span><span class='line'>#
</span><span class='line'># pseudo filter code start
</span><span class='line'>#
</span><span class='line'># filter for arch x86_64 (3221225534)
</span><span class='line'>if ($arch == 3221225534)
</span><span class='line'>  # filter for syscall "fchmodat" (268) [priority: 65535]
</span><span class='line'>    if ($syscall == 268)
</span><span class='line'>        action KILL;
</span><span class='line'>          # default action
</span><span class='line'>            action ALLOW;
</span><span class='line'># invalid architecture action
</span><span class='line'>action KILL;
</span><span class='line'>#
</span><span class='line'># pseudo filter code end
</span><span class='line'>#</span></code></pre></td></tr></table></div></figure>


<p>It seems quite straightforward. And there&rsquo;s an awesome tool: <a href="https://github.com/david942j/seccomp-toolsj">seccomp-tools</a> which can disassembles <em>seccomp_filter.bpf</em> above:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> line  CODE  JT   JF      K
</span><span class='line'> 0000: 0x20 0x00 0x00 0x00000004  A = arch
</span><span class='line'> 0001: 0x15 0x00 0x05 0xc000003e  if (A != ARCH_X86_64) goto 0007
</span><span class='line'> 0002: 0x20 0x00 0x00 0x00000000  A = sys_number
</span><span class='line'> 0003: 0x35 0x00 0x01 0x40000000  if (A &lt; 0x40000000) goto 0005
</span><span class='line'> 0004: 0x15 0x00 0x02 0xffffffff  if (A != 0xffffffff) goto 0007
</span><span class='line'> 0005: 0x15 0x01 0x00 0x0000010c  if (A == fchmodat) goto 0007
</span><span class='line'> 0006: 0x06 0x00 0x00 0x7fff0000  return ALLOW
</span><span class='line'> 0007: 0x06 0x00 0x00 0x00000000  return KILL</span></code></pre></td></tr></table></div></figure>


<h2>Seccomp-BPF</h2>

<p>Seccomp-BPF is just an extension of cBPF (classical Berkeley Packet Filter, Note: not eBPF).
The <strong>tiny</strong>  bpf program runs on a specific VM in kernel, with a rather limited registers and a more reduced instruction set.</p>

<p>BPF code definitions in <em>/usr/include/linux/filter.h</em>:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>struct sock_filter {    /* Filter block */
</span><span class='line'>        __u16   code;   /* Actual filter code */
</span><span class='line'>        __u8    jt;     /* Jump true */
</span><span class='line'>        __u8    jf;     /* Jump false */
</span><span class='line'>        __u32   k;      /* Generic multiuse field */
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p>We can of course, directly apply seccomp-bpf binary code with prctl(), which wraps the <code>seccomp</code> syscall,
to gain more fine-graind control of our bpf. But in most casses, those libseccomp wrappers, like <code>seccomp_rule_add()</code> just works.
The binary code is the same as the just hexdumped file for filtering <code>fchmodat</code>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>int filter_syscalls() {
</span><span class='line'>    int ret = -1;
</span><span class='line'>
</span><span class='line'>    log_debug("filtering syscalls with bpf...");
</span><span class='line'>
</span><span class='line'>    struct sock_filter code[] = {
</span><span class='line'>        /* op,   jt,   jf,     k    */
</span><span class='line'>        {0x20, 0x00, 0x00, 0x00000004},
</span><span class='line'>        {0x15, 0x00, 0x05, 0xc000003e},
</span><span class='line'>        {0x20, 0x00, 0x00, 0x00000000},
</span><span class='line'>        {0x35, 0x00, 0x01, 0x40000000},
</span><span class='line'>        {0x15, 0x00, 0x02, 0xffffffff},
</span><span class='line'>        {0x15, 0x01, 0x00, 0x0000010c}, // 268 fchmodat
</span><span class='line'>        {0x06, 0x00, 0x00, 0x7fff0000},
</span><span class='line'>        {0x06, 0x00, 0x00, 0x00000000},
</span><span class='line'>    };
</span><span class='line'>
</span><span class='line'>    struct sock_fprog bpf = {
</span><span class='line'>        .len = ARRAY_SIZE(code),
</span><span class='line'>        .filter = code,
</span><span class='line'>    };
</span><span class='line'>
</span><span class='line'>    ret = prctl(PR_SET_NO_NEW_PRIVS, 1, 0, 0, 0);
</span><span class='line'>    if (ret &lt; 0) { log_error("error prctl set no new privs"); return EXIT_FAILURE; }
</span><span class='line'>
</span><span class='line'>    prctl(PR_SET_SECCOMP, SECCOMP_MODE_FILTER, &bpf);
</span><span class='line'>    if (ret &lt; 0) { log_error("error prctl set seccomp filter"); return EXIT_FAILURE; }
</span><span class='line'>
</span><span class='line'>    return 0;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>Performance Overhead</h2>

<p>There is no such thing as a free lunch, so as the seccomp-bpf. After all,it is a hooking program, that runs each time whever and whatever a syscall invoked.
We benchmarked 3 senarios: no filter, filter that blocks 1 syscall, and filter that blocks 100 syscall (a more sophisticated bpf).
And we measured the time elpased during 10million <code>write()</code> syscall, and plotted as following:</p>

<div id="hc_test" style="min-width: 310px; height: 400px; margin: 0 auto">hc_test</div>




<script src="https://code.highcharts.com/highcharts.src.js"></script>


<script type="text/javascript">

function draw() {
Highcharts.chart('hc_test', {
    chart: {
      type: 'column'
    },

    title: {
        text: ''//
    },

    subtitle: {
        text: ''//
    },

    xAxis: {
        categories: ['without filter', '1-filter bpf', '100-filter pbf']
    },
    yAxis: {
        title: {
            text: 'time (seconds)',
        },
        max: 5,
        min: 0,
    },

    tooltip: {
        formatter: function () {
            return '<b>' + this.x + '</b><br/>' +
                this.series.name + ': ' + this.y + '<br/>';
        }
    },
plotOptions: {
        bar: {
            dataLabels: {
                enabled: true
            }
        }
    },

    series: [{
        type: 'line',
        name: '256 write real',
        data: [3.991, 4.157, 4.506]
    }, {
        type: 'line',
        name: '2048 write real',
        data: [3.959, 4.162, 4.502]
    }, {
        type: 'line',
        name: '256 write sys',
        data: [2.763, 3.011, 3.397]
    }, {
        type: 'line',
        name: '2048 write sys',
        data: [2.797, 3.059, 3.321]
    }]

});

}

draw();
</script>


<p>As it shows, the overhead is around 5%~10%, and will be even more with the larger bpf code.</p>

<h2>Summary</h2>

<p>In this post, we managed to filter syscalls  with several seccomp-related facilities, inspect the seccomp-bpf code, and understand its costs.
This would be helpful especially if you&rsquo;re implementing your sandbox-like applications that need security concerns.
Wish you enjoy hacking!</p>

<h2>References</h2>

<ul>
<li><a href="http://man7.org/linux/man-pages/man2/seccomp.2.html">Seccomp(2) Linux mannual page</a></li>
<li><a href="http://man7.org/linux/man-pages/man3/seccomp_init.3.html">seccomp_init(3) Linux mannual page</a></li>
<li><a href="https://www.kernel.org/doc/html/v4.16/userspace-api/seccomp_filter.html">Kernel document: seccomp filter</a></li>
<li><a href="https://lwn.net/Articles/656307/">A seccomp overview</a></li>
<li><a href="http://man7.org/conf/lpc2015/limiting_kernel_attack_surface_with_seccomp-LPC_2015-Kerrisk.pdf">Using seccomp to limit the kernel attack surface</a></li>
<li><a href="https://github.com/seccomp/libseccomp">libseccomp source</a></li>
<li><a href="https://lwn.net/Articles/656307/">A seccomp overview</a></li>
<li><a href="https://www.kernel.org/doc/Documentation/networking/filter.txt">Linux Socket Filtering aka Berkeley Packet Filter (BPF)</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Distributed Load Testing by Locust]]></title>
    <link href="https://www.yangyang.cloud/blog/2018/11/13/distributed-load-testing-by-locust/"/>
    <updated>2018-11-13T10:23:38+08:00</updated>
    <id>https://www.yangyang.cloud/blog/2018/11/13/distributed-load-testing-by-locust</id>
    <content type="html"><![CDATA[<h2>Overview</h2>

<h4>What is Distributed Load Testing?</h4>

<p>In my previous post <em><a href="https://www.yangyang.cloud/blog/2018/11/05/http-load-testing-with-wrk2/">http load testing with wrk2</a></em>, we&rsquo;ve introduced some of the concepts of HTTP benchmarking. However that is not the only case, especially when the client is not as performant as the target server. More often, system developers use multiple clients (load testing clusters) to generate more loads. As shown with the picture:</p>

<p><img src="https://www.yangyang.cloud/images/distributed-load-testing-by-locust/load_arch.jpg" alt="" /></p>

<h4>Why locust?</h4>

<p>There&rsquo;s lots of open-source aimed at distributed load testing, like:</p>

<p><a href="https://github.com/locustio/locust">locust</a>
<a href="https://github.com/gatling/gatling">gatling</a>
<a href="https://github.com/shoreditch-ops/artillery">artillery</a>
<a href="https://github.com/tsenart/vegeta">vegeta</a>
<a href="https://github.com/processone/tsung">tsung</a>
<a href="https://jmeter.apache.org/">jmeter</a></p>

<p>While some of them are quite promising, in this post we choose locust, for it&rsquo;s one of the most popular in github and it&rsquo;s very easy to use and demo.</p>

<h2>Simple local test</h2>

<p>Next, let&rsquo;s start with a simple case to show how developer perform distributed load testing with locust.</p>

<h3>example workflow</h3>

<p>Install locust package</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apt -y install python3-pip
</span><span class='line'>pip3 install locustio</span></code></pre></td></tr></table></div></figure>


<p>Edit <em>locustfile.py</em>, the simplest one:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">locust</span> <span class="kn">import</span> <span class="n">HttpLocust</span><span class="p">,</span> <span class="n">TaskSet</span><span class="p">,</span> <span class="n">task</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">UserBehavior</span><span class="p">(</span><span class="n">TaskSet</span><span class="p">):</span>
</span><span class='line'>    <span class="nd">@task</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">index</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
</span><span class='line'>        <span class="bp">self</span><span class="o">.</span><span class="n">client</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&quot;/&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">WebsiteUser</span><span class="p">(</span><span class="n">HttpLocust</span><span class="p">):</span>
</span><span class='line'>    <span class="n">task_set</span> <span class="o">=</span> <span class="n">UserBehavior</span>
</span><span class='line'>    <span class="n">min_wait</span> <span class="o">=</span> <span class="mi">5000</span>
</span><span class='line'>    <span class="n">max_wait</span> <span class="o">=</span> <span class="mi">9000</span>
</span></code></pre></td></tr></table></div></figure>


<p>In fact, locust supports user scenarios by this kind of python script, which is very customizable.</p>

<p>Start master</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">locust</span> <span class="o">--</span><span class="n">host</span><span class="o">=</span><span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="n">TEST_TARGET_HOST</span><span class="p">:</span><span class="n">PORT</span> <span class="o">--</span><span class="n">master</span>
</span></code></pre></td></tr></table></div></figure>


<p>Start slave</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">locust</span> <span class="o">--</span><span class="n">slave</span> <span class="o">--</span><span class="n">master</span><span class="o">-</span><span class="n">host</span><span class="o">=</span><span class="n">MASTER_HOST</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, go to master web-ui (default port on 8089), and start spawning locust!</p>

<p><img src="https://www.yangyang.cloud/images/distributed-load-testing-by-locust/1.PNG" alt="" /></p>

<p>Before launching, we should specify our expected number of users, and the hatch rate.</p>

<p><img src="https://www.yangyang.cloud/images/distributed-load-testing-by-locust/2.PNG" alt="" /></p>

<p>When testing, locust web-ui provides real-time statistics for us, including RPS, Response Time.</p>

<ul>
<li>Trouble shooting</li>
</ul>


<p>You&rsquo;ll get <code>too open files</code> issue if you forget to set it with <code>ulimit</code> command.
<img src="https://www.yangyang.cloud/images/distributed-load-testing-by-locust/4.PNG" alt="" />
<img src="https://www.yangyang.cloud/images/distributed-load-testing-by-locust/5.PNG" alt="" /></p>

<h3>problems with locust</h3>

<p>Python is not a fast language, the problem is even exacerbated when it comes to the IO-intensive application. Fortunately, locust is designed and implemented to be well scaled out, and the problem can be ameliorated a lot.</p>

<h2>AutoScaling cluster on cloud</h2>

<p>For deploying locust testing on cloud, the most suitable product is cluster management service, no matter whether it&rsquo;s the cluster for virtual machine (AutoScaling), or the cluster for container (Kubernetes Service). In this post, we conduct our load testing with AutoScaling of TencentCloud.</p>

<p>First, we build our locust image in which the locust package is installed and locust file is prepared. Second, we create our testing cluster, namely an AutoScalingGroup of our test LaunchConfiguration, which is an instance template associated with the locust image we just build. Additionally, we need to make sure that our testing cluster and target host are in the same VirtualPrivateCloud, so that they can access each other within the private network and cost little for network bandwidth. And setup the External IP as well as the Security groups for locust master node, as we&rsquo;ll access its port 8089 for the web-ui.</p>

<p>Now that we&rsquo;ve set up our load testing cluster, we could tune its Expected Instance Number on our demand.</p>

<p><img src="https://www.yangyang.cloud/images/distributed-load-testing-by-locust/6.PNG" alt="" /></p>

<ul>
<li>When to add client?</li>
</ul>


<p>Usually, as long as the final RPS increases proportionally with the number of clients, we should consider add 1 more client. In our example, 6 clients proved to be just enough.</p>

<ul>
<li>How to inspect the chart to find the best performance?</li>
</ul>


<p>When the QoS is no longer satisfied, there comes the point. As the above chart shows, the p95 is longer than 1s when the number of concurrent user reaches to 22K, and the RPS is 2830 by that time. That&rsquo;s it.</p>

<h2>Conclusions</h2>

<p>By this post, we&rsquo;ve completed an example of distributed load testing. Although there&rsquo;s a plenty of choice of testing tools, the locust is such an easy-to-use tool to help us understand the basic concepts. Thanks to the cloud-managed service like AutoScaling, we can manage our workload cluster with ease. And happy benchmarking!</p>

<h2>References</h2>

<ul>
<li><a href="https://locust.io/">locust.io official page</a></li>
<li><a href="https://cloud.tencent.com/product/as">TencentCloud AutoScaling</a></li>
<li><a href="https://cloud.google.com/solutions/distributed-load-testing-using-kubernetes">distributed-load-testing-using-kubernetes</a></li>
<li><a href="https://medium.com/@vigneshwar.ravimurugan/scriptable-and-distributed-load-testing-with-locust-in-azure-kubernetes-service-63d04c083058">Scriptable and Distributed Load Testing with Locust in Azure Kubernetes Service</a></li>
<li><a href="https://blog.realkinetic.com/load-testing-with-locust-part-1-174040afdf23">Load Testing with Locust (Part 1)</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/an-introduction-to-load-testing">an introduction to load testing</a></li>
<li><a href="https://blog.loadimpact.com/open-source-load-testing-tool-review">open source load testing tool review</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Worker Pool With Eventfd]]></title>
    <link href="https://www.yangyang.cloud/blog/2018/11/09/worker-pool-with-eventfd/"/>
    <updated>2018-11-09T22:41:08+08:00</updated>
    <id>https://www.yangyang.cloud/blog/2018/11/09/worker-pool-with-eventfd</id>
    <content type="html"><![CDATA[<h2>Linux Eventfd Overview</h2>

<p>An  &ldquo;eventfd  object&rdquo; can be used as an event wait/notify mechanism by user-space applications, and by the kernel to notify user-space applications of events.
It has been added to kernel since Linux 2.6.22. And the object contains an unsigned 64-bit integer (uint64_t) counter that is maintained by the kernel. So it&rsquo;s extremely fast to access.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;sys/eventfd.h&gt;</span>
</span><span class='line'><span class="kt">int</span> <span class="nf">eventfd</span><span class="p">(</span><span class="kt">unsigned</span> <span class="kt">int</span> <span class="n">initval</span><span class="p">,</span> <span class="kt">int</span> <span class="n">flags</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>That&rsquo;s all we need to create one eventfd file, after that, we can perform normal file operations (like read/write, poll and close) with it.</p>

<p>Once some user-space thread write it with value greater than 0, it will instantly be notified to user-space by kernel. Then, the first thread which read it, will reset it (zero its counter), i.e. consume the event. And all the later read will get Error (Resource Temporarily Unavailable), until it is written again (event triggered). Briefly, it transforms an event to a file descriptor that can be effectively monitored.</p>

<p>There&rsquo;re several notes of which we should take special account:</p>

<blockquote><p>Applications can use an eventfd file descriptor instead of a pipe <strong>in all cases where a pipe is used simply to signal events</strong>.  The kernel overhead of an eventfd file descriptor is much lower than that of a pipe, and only one file descriptor is required (versus the two required for a pipe).</p></blockquote>

<p>As with signal events, eventfd is much more light-weight (thus fast) compared to the pipes, it&rsquo;s just a counter in kernel after all.</p>

<blockquote><p>A key point about an eventfd file descriptor is that it can be monitored just like any other file descriptor using select(2), poll(2), or epoll(7). This means that an application can simultaneously monitor the readiness of &ldquo;traditional&rdquo; files and the readiness of other kernel mechanisms that support the eventfd interface.</p></blockquote>

<p>You won&rsquo;t wield the true power of eventfd, unless you monitor them with epoll (especially EPOLLET).</p>

<p>So, let&rsquo;s get our hands dirty with an simple worker thread pool!</p>

<h2>Worker Pool Design</h2>

<p>We adopt Producer/Consumer pattern for our worker thread pool, as it&rsquo;s the most common style of decoupling, achieving the best scalability.
By leveraging the asynchronous notification feature from the eventfd, our inter-thread communication sequence could be described as following:</p>

<p><img src="https://www.yangyang.cloud/images/worker-pool-with-eventfd/eventfd_notify.svg" alt="" /></p>

<h2>Implementation</h2>

<p>Our per-thread data structure is fairly simple, only contains 3 fields: <code>thread_id</code>, <code>rank</code> (thread index) and <code>epfd</code> which is the epoll file descriptor created by <code>main</code> function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">typedef</span> <span class="k">struct</span> <span class="n">thread_info</span> <span class="p">{</span>
</span><span class='line'>    <span class="kt">pthread_t</span> <span class="n">thread_id</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">rank</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">epfd</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span> <span class="kt">thread_info_t</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Consumer thread routine</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="o">*</span><span class="nf">consumer_routine</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">thread_info</span> <span class="o">*</span><span class="n">c</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">thread_info</span> <span class="o">*</span><span class="p">)</span><span class="n">data</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">epoll_event</span> <span class="o">*</span><span class="n">events</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">epfd</span> <span class="o">=</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">epfd</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">nfds</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">uint64_t</span> <span class="n">v</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">num_done</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">events</span> <span class="o">=</span> <span class="n">calloc</span><span class="p">(</span><span class="n">MAX_EVENTS_SIZE</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="k">struct</span> <span class="n">epoll_event</span><span class="p">));</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">events</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span> <span class="n">exit_error</span><span class="p">(</span><span class="s">&quot;calloc epoll events</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span> <span class="p">(;;)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">nfds</span> <span class="o">=</span> <span class="n">epoll_wait</span><span class="p">(</span><span class="n">epfd</span><span class="p">,</span> <span class="n">events</span><span class="p">,</span> <span class="n">MAX_EVENTS_SIZE</span><span class="p">,</span> <span class="mi">1000</span><span class="p">);</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">nfds</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">events</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">events</span> <span class="o">&amp;</span> <span class="n">EPOLLIN</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">log_debug</span><span class="p">(</span><span class="s">&quot;[consumer-%d] got event from fd-%d&quot;</span><span class="p">,</span>
</span><span class='line'>                        <span class="n">c</span><span class="o">-&gt;</span><span class="n">rank</span><span class="p">,</span> <span class="n">events</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">data</span><span class="p">.</span><span class="n">fd</span><span class="p">);</span>
</span><span class='line'>                <span class="n">ret</span> <span class="o">=</span> <span class="n">read</span><span class="p">(</span><span class="n">events</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">data</span><span class="p">.</span><span class="n">fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">v</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">v</span><span class="p">));</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                    <span class="n">log_error</span><span class="p">(</span><span class="s">&quot;[consumer-%d] failed to read eventfd&quot;</span><span class="p">,</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">rank</span><span class="p">);</span>
</span><span class='line'>                    <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>                <span class="n">close</span><span class="p">(</span><span class="n">events</span><span class="p">[</span><span class="n">i</span><span class="p">].</span><span class="n">data</span><span class="p">.</span><span class="n">fd</span><span class="p">);</span>
</span><span class='line'>                <span class="n">do_task</span><span class="p">();</span>
</span><span class='line'>                <span class="n">log_debug</span><span class="p">(</span><span class="s">&quot;[consumer-%d] tasks done: %d&quot;</span><span class="p">,</span> <span class="n">c</span><span class="o">-&gt;</span><span class="n">rank</span><span class="p">,</span> <span class="o">++</span><span class="n">num_done</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>As we can see, the worker thread get the notification by simply polling <code>epoll_wait()</code> the epoll-added fd list, and <code>read()</code> the eventfd to consume it,  then <code>close()</code> to clean it.
And we can do anything sequential within the <code>do_task</code>, although it now does nothing.</p>

<p>In short: poll -> read -> close.</p>

<h4>Producer thread routine</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="o">*</span><span class="nf">producer_routine</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">thread_info</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">thread_info</span> <span class="o">*</span><span class="p">)</span><span class="n">data</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">epoll_event</span> <span class="n">event</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">epfd</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">epfd</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">efd</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">interval</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">log_debug</span><span class="p">(</span><span class="s">&quot;[producer-%d] issues 1 task per %d second&quot;</span><span class="p">,</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">rank</span><span class="p">,</span> <span class="n">interval</span><span class="p">);</span>
</span><span class='line'>    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">efd</span> <span class="o">=</span> <span class="n">eventfd</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">EFD_CLOEXEC</span> <span class="o">|</span> <span class="n">EFD_NONBLOCK</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">efd</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="n">exit_error</span><span class="p">(</span><span class="s">&quot;eventfd create: %s&quot;</span><span class="p">,</span> <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
</span><span class='line'>        <span class="n">event</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">fd</span> <span class="o">=</span> <span class="n">efd</span><span class="p">;</span>
</span><span class='line'>        <span class="n">event</span><span class="p">.</span><span class="n">events</span> <span class="o">=</span> <span class="n">EPOLLIN</span> <span class="o">|</span> <span class="n">EPOLLET</span><span class="p">;</span>
</span><span class='line'>        <span class="n">ret</span> <span class="o">=</span> <span class="n">epoll_ctl</span><span class="p">(</span><span class="n">epfd</span><span class="p">,</span> <span class="n">EPOLL_CTL_ADD</span><span class="p">,</span> <span class="n">efd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">event</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="n">exit_error</span><span class="p">(</span><span class="s">&quot;epoll_ctl&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">ret</span> <span class="o">=</span> <span class="n">write</span><span class="p">(</span><span class="n">efd</span><span class="p">,</span> <span class="o">&amp;</span><span class="p">(</span><span class="kt">uint64_t</span><span class="p">){</span><span class="mi">1</span><span class="p">},</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">uint64_t</span><span class="p">));</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">!=</span> <span class="mi">8</span><span class="p">)</span> <span class="n">log_error</span><span class="p">(</span><span class="s">&quot;[producer-%d] failed to write eventfd&quot;</span><span class="p">,</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">rank</span><span class="p">);</span>
</span><span class='line'>        <span class="n">sleep</span><span class="p">(</span><span class="n">interval</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>In producer routine, after creating <code>eventfd</code>, we register the event with epoll object by <code>epoll_ctl()</code>. Note that the event is set for write (EPOLLIN) and Edge-Triggered (EPOLLET).
For notification, what we need to do is just write <code>0x1</code> (any value you want) to eventfd.</p>

<p>In short: create -> register -> write.</p>

<p><em>Source code repository</em>: <a href="https://github.com/Pro-YY/eventfd_examples/">eventfd_examples</a></p>

<h2>Output &amp; Analysis</h2>

<p>The expected output is clear as:</p>

<p><img src="https://www.yangyang.cloud/images/worker-pool-with-eventfd/eventfd_worker_execution.gif" alt="" /></p>

<p>You can adjust threads number to inspect the detail, and there&rsquo;s a plethora of fun with it.</p>

<p>But now, let&rsquo;s try something hard. We&rsquo;ll <code>smoke test</code> our worker by generate a heavy instant load, instead of the former regular one. And we tweak the producer/consumer thread to 1, and watching the performance.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="o">*</span><span class="nf">producer_routine_spike</span><span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="n">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">thread_info</span> <span class="o">*</span><span class="n">p</span> <span class="o">=</span> <span class="p">(</span><span class="k">struct</span> <span class="n">thread_info</span> <span class="o">*</span><span class="p">)</span><span class="n">data</span><span class="p">;</span>
</span><span class='line'>    <span class="k">struct</span> <span class="n">epoll_event</span> <span class="n">event</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">epfd</span> <span class="o">=</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">epfd</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">efd</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">ret</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="kt">int</span> <span class="n">num_task</span> <span class="o">=</span> <span class="mi">1000000</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">log_debug</span><span class="p">(</span><span class="s">&quot;[producer-%d] will issue %d tasks&quot;</span><span class="p">,</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">rank</span><span class="p">,</span> <span class="n">num_task</span><span class="p">);</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">num_task</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">efd</span> <span class="o">=</span> <span class="n">eventfd</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">EFD_CLOEXEC</span> <span class="o">|</span> <span class="n">EFD_NONBLOCK</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">efd</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="n">exit_error</span><span class="p">(</span><span class="s">&quot;eventfd create: %s&quot;</span><span class="p">,</span> <span class="n">strerror</span><span class="p">(</span><span class="n">errno</span><span class="p">));</span>
</span><span class='line'>        <span class="n">event</span><span class="p">.</span><span class="n">data</span><span class="p">.</span><span class="n">fd</span> <span class="o">=</span> <span class="n">efd</span><span class="p">;</span>
</span><span class='line'>        <span class="n">event</span><span class="p">.</span><span class="n">events</span> <span class="o">=</span> <span class="n">EPOLLIN</span> <span class="o">|</span> <span class="n">EPOLLET</span><span class="p">;</span>
</span><span class='line'>        <span class="n">ret</span> <span class="o">=</span> <span class="n">epoll_ctl</span><span class="p">(</span><span class="n">epfd</span><span class="p">,</span> <span class="n">EPOLL_CTL_ADD</span><span class="p">,</span> <span class="n">efd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">event</span><span class="p">);</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span> <span class="n">exit_error</span><span class="p">(</span><span class="s">&quot;epoll_ctl&quot;</span><span class="p">);</span>
</span><span class='line'>        <span class="n">ret</span> <span class="o">=</span> <span class="n">write</span><span class="p">(</span><span class="n">efd</span><span class="p">,</span> <span class="o">&amp;</span><span class="p">(</span><span class="kt">uint64_t</span><span class="p">){</span><span class="mi">1</span><span class="p">},</span> <span class="k">sizeof</span><span class="p">(</span><span class="kt">uint64_t</span><span class="p">));</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="n">ret</span> <span class="o">!=</span> <span class="mi">8</span><span class="p">)</span> <span class="n">log_error</span><span class="p">(</span><span class="s">&quot;[producer-%d] failed to write eventfd&quot;</span><span class="p">,</span> <span class="n">p</span><span class="o">-&gt;</span><span class="n">rank</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="kt">void</span> <span class="o">*</span><span class="p">)</span><span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Over 1 million?</strong> Indeed! By using the <code>ulimit</code> command below, we can increase the <code>open files</code> limit of the current shell, which is usually 1024 by default.
Note that you need to be root.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">ulimit</span> <span class="o">-</span><span class="n">n</span> <span class="mi">1048576</span>
</span><span class='line'>
</span><span class='line'><span class="cp"># 1048576 is the default maximum for open files, as `/proc/sys/fs/nr_open` shows.</span>
</span><span class='line'><span class="cp"># To make it larger, you need to tweak kernel settings like this (which is beyond our scope)</span>
</span><span class='line'><span class="cp"># sysctl -w fs.nr_open=10485760</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since the info of stdout is so much that we redirect the stdout to file <em>log</em>.
<img src="https://www.yangyang.cloud/images/worker-pool-with-eventfd/eventfd_worker_execution_spike.gif" alt="" /></p>

<p>With my test VM (S2.Medium4 type on <a href="https://cloud.tencent.com/">TencentCloud</a>, which has only 2 vCPU and 4G memory, it takes less than 6.5 seconds to deal with 1 million concurrent (almost) events. And we&rsquo;ve seen the kernel-implemented counters and wait queue are quite efficient.</p>

<h2>Conclusions</h2>

<p>Multi-threaded programming model is prevailing now, while the best way of scheduling (event trigger and dispatching method) is still under discussion and sometimes even opinionated.
In this post, we&rsquo;ve implemented general-purposed worker thread pool based on an advanced message mechanism, which includes:</p>

<ol>
<li>message notification: asynchronous delivering, extremely low overhead, high performance</li>
<li>message dispatching: as a load balancer, highly scalable</li>
<li>message buffering: as message queue, with robustness</li>
</ol>


<p>All the above are fulfilled by using basic Linux kernel feature/syscall, like <code>epoll</code> and <code>eventfd</code>.
Everyone may refers to this approach when he/she designs a single-process performant (especially IO-bound) background service.</p>

<p>To sum up, taking advantage of Linux kernel capability, we are now managed to implement our high-performance message-based worker pool, which is able to deal with large throughput and of high scalability.</p>

<h2>References</h2>

<ul>
<li><a href="https://linux.die.net/man/2/eventfd">eventfd(2) - Linux Man Page</a></li>
<li><a href="https://elixir.bootlin.com/linux/latest/source/fs/eventpoll.c">eventpoll - Linux Source Code</a></li>
<li><a href="https://elixir.bootlin.com/linux/latest/source/fs/eventfd.c">eventfd - Linux Source Code</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Http Load Testing With Wrk2]]></title>
    <link href="https://www.yangyang.cloud/blog/2018/11/05/http-load-testing-with-wrk2/"/>
    <updated>2018-11-05T16:36:47+08:00</updated>
    <id>https://www.yangyang.cloud/blog/2018/11/05/http-load-testing-with-wrk2</id>
    <content type="html"><![CDATA[<h2>Overviews</h2>

<p>How to measure our server&rsquo;s performance?
With this article, we&rsquo;ll discuss and experiment with HTTP server benchmark.</p>

<p>Let&rsquo;s start to recap some of the key concept related:</p>

<ul>
<li><p>Connection</p>

<p>  The number of simultaneous tcp connections, sometimes refered as <code>Number of Users</code> in other benchmark tools.</p></li>
<li><p>Latency</p>

<p>  For HTTP request, it is the same as the <code>Response Time</code>, measured by <code>ms</code>. And it is tested from clients.
  The latency <code>percentile</code>, like p50/p90/p99, is the most common QoS metric.</p></li>
<li><p>Throughput</p>

<p>  For HTTP request, it&rsquo;s also refered as <code>requests/second</code> or <code>RPS</code> for short. Usually, as the number of connections increases, the system throughput goes down.</p></li>
</ul>


<p>So, what does <code>load testing</code> really mean?</p>

<p>In brief, it&rsquo;s to determine the maximum throughput (the highest RPS), under specified number of connection, with all response time satisfying the latency target.</p>

<p>Thus, we can remark a server capability like this:</p>

<blockquote><p>&ldquo;Our server instance can achieve 20K RPS under 5K simultaneous connections with latency p99 at less than 200ms.&rdquo;</p></blockquote>

<h2>What&rsquo;s wrk2</h2>

<p><a href="https://github.com/giltene/wrk2">wrk2</a> is an HTTP benchmarking cli tool, which is considered better than <a href="https://httpd.apache.org/docs/2.4/programs/ab.html">ab</a> or <a href="https://github.com/wg/wrk">wrk</a>.
With wrk2, we are able to generate some constant throughput load, and its latency detail is more accurate. As a command-line tool, it&rsquo;s quite convenient and fast.</p>

<ul>
<li>-d: duration, test time. Note that it has a 10 second calibration time, so this should be specified no shorter than 20s.</li>
<li>-t: threads num. Just set it to cpu cores.</li>
<li>-R: or &ndash;rate, expected throughput, the result RPS which is real throughput, will be lower than this value.</li>
<li>-c: connections num. The Number of connections that will be kept open.</li>
</ul>


<h2>SUT simple implementation</h2>

<p>All servers are simple http-server, which simply response <code>Hello, world!\n</code> to clients.</p>

<ul>
<li>Rust 1.28.0 (hyper 0.12)</li>
<li>Go 1.11.1 http module</li>
<li>Node.js 8.11.4</li>
<li>Python 3.5.2 asyncio</li>
</ul>


<h2>Testing Workflow</h2>

<p>Our latency target: <strong>The 99 percentile is less than 200ms.</strong> It&rsquo;s a fairly high performance in real world.</p>

<p>Due to the calibration time of wrk2, all the test last for 30~60 seconds.
And since our test machine has 2 cpu-threads, our command is like:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./wrk -t2 -c100 -d60 -R 18000 -L http://$HOST:$PORT/</span></code></pre></td></tr></table></div></figure>


<p>We iterate to execute the command, and increase the request rate (-R argument) by 500 on each turn until we find the maximum RPS. The whole workflow can be explained as:
<img src="https://www.yangyang.cloud/images/http-load-testing-with-wrk2/hb_wf.svg" alt="" /></p>

<p>Then we go on test for a larger number of connections, until the latency target is no longer satisfied or socket connection errors occur. And move to next server.</p>

<h2>Results Analysis</h2>

<p>Now, let&rsquo;s feed our output data to plot program with <a href="https://matplotlib.org/3.0.0/">matplotlib</a>, and finally get the whole picture below:
<img src="https://www.yangyang.cloud/images/http-load-testing-with-wrk2/http_performance_benchmark.svg" alt="" /></p>

<p>The plot is fairly clear. Rust beats Go even in such an I/O intensive scenario, which shows the non-blocking sockets version of hyper really makes something great. Node.js is indeed slower than Go, while Python&rsquo;s default asyncio event loop have a rather poor performance.
As a spoiler alert, for the even more connections (i.e. 5K, 10K&hellip;), both Rust and Go can still hold very well without any socket connection error, though the response time is longer, and Rust still performed better, while the last two may get down.</p>

<h2>Conclusions</h2>

<p>In this post, we managed to benchmark the performance of our web server by using wrk2. And with finite experiment steps, we could determine the server&rsquo;s highest throughput under certain number of connections, which meets the specified latency QoS target.</p>

<h2>References</h2>

<ul>
<li><a href="https://github.com/giltene/wrk2">https://github.com/giltene/wrk2</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/an-introduction-to-load-testing">https://www.digitalocean.com/community/tutorials/an-introduction-to-load-testing</a></li>
<li><a href="https://blog.loadimpact.com/open-source-load-testing-tool-review">https://blog.loadimpact.com/open-source-load-testing-tool-review</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Linux Kernel Module]]></title>
    <link href="https://www.yangyang.cloud/blog/2018/10/23/building-linux-kernel-module/"/>
    <updated>2018-10-23T10:30:28+08:00</updated>
    <id>https://www.yangyang.cloud/blog/2018/10/23/building-linux-kernel-module</id>
    <content type="html"><![CDATA[<h2>Overview</h2>

<ul>
<li>What is Linux loadable kernel module(LKM)?</li>
</ul>


<p>A loadable kernel module (LKM) is a mechanism for adding/removing code from Linux kernel <strong>at run time</strong>.
Many of device drivers are implemented through this way, otherwise the monolithic kernel would be too large.</p>

<p>LKM communicates with user-space applications through system calls, and it can access almost all the objects/services of the kernel.
LKM can be inserted to the monolithic kernel at any time &ndash; usually at booting or running phase.</p>

<p>Writing LKM has many advantages against directly tweaking the whole kernel. For LKM can be dynamically inserted or removed at run time, we don&rsquo;t need to recompile the whole kernel nor reboot, and it&rsquo;s more shippable.</p>

<p>So, the easiest way to start kernel programming is to write a module - a piece of code that can be dynamically loaded into the kernel.</p>

<ul>
<li>How is the LKM different from an user-space application?</li>
</ul>


<p>LKM is run in kernel space, which is quite different.</p>

<p>First off, the code is always asynchronous, which means it doesn&rsquo;t execute sequentially and may be interrupted at any time. Thus programmers should always care about the concurrency as well as reentrant issues. Unlike user-space application, which has an entry-point like <code>main()</code> and then execute and exit, the LKM is more like a complicated event-driven server that internally has the ability to interact with various kernel services, and externally provides system calls as its user-space <code>api</code>.</p>

<p>Secondly, there&rsquo;s only a fixed and small stack, resource cleanup as well as utilization should always be highly considered. While as for the user-space application, the resource quota is fairly sufficient.</p>

<p>Thirdly, note that there&rsquo;s no floating-point math.</p>

<h2>Prepare Headers</h2>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>apt search linux-headers-<span class="k">$(</span>uname -r<span class="k">)</span>
</span><span class='line'><span class="c"># get our kernel release: 4.18.0.kali2-amd64</span>
</span><span class='line'>apt install linux-headers-4.18.0.kali2-amd64
</span></code></pre></td></tr></table></div></figure>


<h2>Simple Module Code</h2>

<p><em>hello.c</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="cp">#include &lt;linux/module.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="n">MODULE_LICENSE</span><span class="p">(</span><span class="s">&quot;GPL&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">MODULE_AUTHOR</span><span class="p">(</span><span class="s">&quot;Brooke Yang&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">MODULE_DESCRIPTION</span><span class="p">(</span><span class="s">&quot;A simple Linux moadable mernel module&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">MODULE_VERSION</span><span class="p">(</span><span class="s">&quot;0.1&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">char</span> <span class="o">*</span><span class="n">name</span> <span class="o">=</span> <span class="s">&quot;world&quot;</span><span class="p">;</span>
</span><span class='line'><span class="n">module_param</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">charp</span><span class="p">,</span> <span class="n">S_IRUGO</span><span class="p">);</span>
</span><span class='line'><span class="n">MODULE_PARM_DESC</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="s">&quot;The name to display&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">int</span> <span class="n">__init</span> <span class="nf">hello_init</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">pr_info</span><span class="p">(</span><span class="s">&quot;HELLO: Hello, %s!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>
</span><span class='line'>  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">static</span> <span class="kt">void</span> <span class="n">__exit</span> <span class="nf">hello_exit</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">pr_info</span><span class="p">(</span><span class="s">&quot;HELLO: Bye-bye, %s!</span><span class="se">\n</span><span class="s">&quot;</span><span class="p">,</span> <span class="n">name</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">module_init</span><span class="p">(</span><span class="n">hello_init</span><span class="p">);</span>
</span><span class='line'><span class="n">module_exit</span><span class="p">(</span><span class="n">hello_exit</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>pr_info</strong> is a more convenient way of debugging, comparing to the old-style <strong>printk</strong>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>printk<span class="o">(</span>KERN_INFO ...<span class="o">)</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p><em>Makefile</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='makefile'><span class='line'><span class="nv">obj-m</span><span class="o">+=</span>hello.o
</span><span class='line'>
</span><span class='line'><span class="nf">all</span><span class="o">:</span>
</span><span class='line'>  make -C /lib/modules/<span class="k">$(</span>shell uname -r<span class="k">)</span>/build/ <span class="nv">M</span><span class="o">=</span><span class="k">$(</span>PWD<span class="k">)</span> modules
</span><span class='line'><span class="nf">clean</span><span class="o">:</span>
</span><span class='line'>  make -C /lib/modules/<span class="k">$(</span>shell uname -r<span class="k">)</span>/build/ <span class="nv">M</span><span class="o">=</span><span class="k">$(</span>PWD<span class="k">)</span> clean
</span></code></pre></td></tr></table></div></figure>


<h2>Build &amp;&amp; Install</h2>

<p>Now we can <code>make</code> our <strong>hello</strong> module and then a <em>hello.ko</em> emerged successfully.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>root@kali:/opt/kernel-modules/hello# make
</span><span class='line'>make -C /lib/modules/4.18.0-kali2-amd64/build/ <span class="nv">M</span><span class="o">=</span>/opt/kernel-modules/hello modules
</span><span class='line'>make<span class="o">[</span>1<span class="o">]</span>: Entering directory <span class="s1">&#39;/usr/src/linux-headers-4.18.0-kali2-amd64&#39;</span>
</span><span class='line'>  CC <span class="o">[</span>M<span class="o">]</span>  /opt/kernel-modules/hello/hello.o
</span><span class='line'>  Building modules, stage 2.
</span><span class='line'>  MODPOST <span class="m">1</span> modules
</span><span class='line'>  CC      /opt/kernel-modules/hello/hello.mod.o
</span><span class='line'>  LD <span class="o">[</span>M<span class="o">]</span>  /opt/kernel-modules/hello/hello.ko
</span><span class='line'>make<span class="o">[</span>1<span class="o">]</span>: Leaving directory <span class="s1">&#39;/usr/src/linux-headers-4.18.0-kali2-amd64&#39;</span>
</span><span class='line'>root@kali:/opt/kernel-modules/hello# ls -l
</span><span class='line'>total 556
</span><span class='line'>-rw-r--r-- <span class="m">1</span> root root    <span class="m">566</span> Oct <span class="m">23</span> 09:41 hello.c
</span><span class='line'>-rw-r--r-- <span class="m">1</span> root root <span class="m">272720</span> Oct <span class="m">23</span> 09:41 hello.ko
</span><span class='line'>-rw-r--r-- <span class="m">1</span> root root    <span class="m">872</span> Oct <span class="m">23</span> 09:41 hello.mod.c
</span><span class='line'>-rw-r--r-- <span class="m">1</span> root root <span class="m">136376</span> Oct <span class="m">23</span> 09:41 hello.mod.o
</span><span class='line'>-rw-r--r-- <span class="m">1</span> root root <span class="m">137864</span> Oct <span class="m">23</span> 09:41 hello.o
</span><span class='line'>-rw-r--r-- <span class="m">1</span> root root    <span class="m">154</span> Oct <span class="m">23</span> 09:38 Makefile
</span><span class='line'>-rw-r--r-- <span class="m">1</span> root root     <span class="m">42</span> Oct <span class="m">23</span> 09:41 modules.order
</span><span class='line'>-rw-r--r-- <span class="m">1</span> root root      <span class="m">0</span> Oct <span class="m">23</span> 09:41 Module.symvers
</span></code></pre></td></tr></table></div></figure>


<p>Display module info</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>root@kali:/opt/kernel-modules/hello# modinfo hello.ko
</span><span class='line'>filename:       /opt/kernel-modules/hello/hello.ko
</span><span class='line'>version:        0.1
</span><span class='line'>description:    A simple Linux moadable mernel module
</span><span class='line'>author:         Brooke Yang
</span><span class='line'>license:        GPL
</span><span class='line'>srcversion:     440743A20C6C4688E185D30
</span><span class='line'>depends:
</span><span class='line'>retpoline:      Y
</span><span class='line'>name:           hello
</span><span class='line'>vermagic:       4.18.0-kali2-amd64 SMP mod_unload modversions
</span><span class='line'>parm:           name:The name to display <span class="o">(</span>charp<span class="o">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>root@kali:/opt/kernel-modules/hello# insmod hello.ko
</span><span class='line'>root@kali:/opt/kernel-modules/hello# rmmod hello
</span><span class='line'>root@kali:/opt/kernel-modules/hello# insmod hello.ko <span class="nv">name</span><span class="o">=</span>Brooke
</span><span class='line'>root@kali:/opt/kernel-modules/hello# rmmod hello
</span></code></pre></td></tr></table></div></figure>


<p>we can watch the log by <code>tail -f</code> the <em>/var/log/kern.log</em> or just <code>dmesg</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sh'><span class='line'>Oct <span class="m">23</span> 09:51:37 kali kernel: <span class="o">[</span> 2651.831228<span class="o">]</span> HELLO: Hello, world!
</span><span class='line'>Oct <span class="m">23</span> 09:51:44 kali kernel: <span class="o">[</span> 2658.680087<span class="o">]</span> HELLO: Bye-bye, world!
</span><span class='line'>Oct <span class="m">23</span> 09:51:57 kali kernel: <span class="o">[</span> 2672.409216<span class="o">]</span> HELLO: Hello, Brooke!
</span><span class='line'>Oct <span class="m">23</span> 09:52:02 kali kernel: <span class="o">[</span> 2677.482181<span class="o">]</span> HELLO: Bye-bye, Brooke!
</span></code></pre></td></tr></table></div></figure>


<p>Done!</p>

<p>note: char parm can even be Chinese.</p>

<h2>Conclusions</h2>

<p>With this article, we managed to complete our first yet very simple Linux loadable kernel module(LKM).</p>

<p>We&rsquo;ve got a broad view of how the LKMs work. And we should configure our own kernel modules, build and insert/remove them at runtime, and define/pass custom parameters to them.</p>

<h2>References</h2>

<ul>
<li><a href="http://derekmolloy.ie/writing-a-linux-kernel-module-part-1-introduction/">writing a linux kernel module part 1 introduction</a></li>
<li><a href="https://qnaplus.com/how-to-compile-linux-kernel-module/">how to compile linux kernel modul</a></li>
<li><a href="https://qnaplus.com/linux-kernel-programming-basics-create-loadable-kernel-module/">linux kernel programming basics create loadable kernel module</a></li>
<li><a href="https://www.linuxvoice.com/be-a-kernel-hacker/">be a kernel hacker</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compiling Kernel With Kali Linux]]></title>
    <link href="https://www.yangyang.cloud/blog/2018/10/22/compiling-kernel-with-kali-linux/"/>
    <updated>2018-10-22T09:57:10+08:00</updated>
    <id>https://www.yangyang.cloud/blog/2018/10/22/compiling-kernel-with-kali-linux</id>
    <content type="html"><![CDATA[<p>With the instructions in <a href="https://docs.kali.org/development/recompiling-the-kali-linux-kernel">Recompiling the Kali Linux Kernel</a>, we can recompile the whole linux kernel of our kali linux.</p>

<h2>Install Dependencies</h2>

<p>We need to start by installing several build dependency packages, some of them may have already been in installed.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apt install build-essential libncurses5-dev fakeroot bison libssl-dev libelf-dev</span></code></pre></td></tr></table></div></figure>


<h2>Download the Kernel Source</h2>

<p>For my system, the kernel version is 4.18, which will be used in following example. Of course, the workflow of other version is just the same.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apt install linux-source-4.18
</span><span class='line'>[...]
</span><span class='line'>ls /usr/src
</span><span class='line'>linux-config-4.18 linux-patch-4.18-rt.patch.xz linux-source-4.18.tar.xz</span></code></pre></td></tr></table></div></figure>


<p>Then we get the compressed archive of the kernel sources, and we&rsquo;ll extract these files in our working directory, (no special permission need for compiling the kernel). In our example, we use <em>/opt/kernel</em>, and the <em>~/kernel</em> is also an appropriate place.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir /opt/kernel; cd /opt/kernel
</span><span class='line'>tar -xaf /usr/src/linux-source-4.18.tar.xz</span></code></pre></td></tr></table></div></figure>


<p>Optionally, we may also apply the <em>rt</em> patch, which is for real-time os features.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /opt/kernel/linux-source-4.18
</span><span class='line'>xzcat /usr/src/linux-patch-4.18-rt.patch.xz | patch -p1</span></code></pre></td></tr></table></div></figure>


<h2>Configure the Kernel</h2>

<p>When building a more recent version of kernel (possibly with an specific patch), the configuration should at first be kept as close as possible to the current running kernel, shown by <strong>uname -r</strong>. It is sufficient to just copy the currently-used kernel config to the source directory.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /opt/kernel/linux-source-4.18
</span><span class='line'>cp /boot/config-4.18.0-kali2-amd64 .config</span></code></pre></td></tr></table></div></figure>


<p>If you need to make some changes or decide to reconfigure all things from scratch, just call <strong>make menuconfig</strong> command and inspect all the details.
Note: we can tweak a lot in this phase.</p>

<h2>Write Some Code</h2>

<p>Add one line of code for test(fun), in file <em>init/main.c</em>, <strong>start_kernel</strong> function</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pr_notice("Brookes's customized kernel starting: %s %d\n", __FUNCTION__, __LINE__);
</span><span class='line'>pr_notice("%s", linux_banner);</span></code></pre></td></tr></table></div></figure>


<h2>Build the Kernel</h2>

<p>Once configured, we can <strong>make</strong> the kernel. Rather than invoking <strong>make deb-pkg</strong> as the official doc suggested, we use <strong>make bindeb-pkg</strong> here, which will not generate Debian source package, or invoke <strong>make clean</strong>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>time make -j4 bindeb-pkg LOCALVERSION=-custom KDEB_PKGVERSION=$(make kernelversion)-$(date +%Y%m%d)</span></code></pre></td></tr></table></div></figure>


<p>After a while, we get following package in the parent directory</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>linux-headers-4.18.10-custom_4.18.10-20181021_amd64.deb   # headers
</span><span class='line'>linux-image-4.18.10-custom_4.18.10-20181021_amd64.deb     # kernel image
</span><span class='line'>linux-image-4.18.10-custom-dbg_4.18.10-20181021_amd64.deb # kernel image with debugging symbols
</span><span class='line'>linux-libc-dev_4.18.10-20181021_amd64.deb                 # headers of user-space library</span></code></pre></td></tr></table></div></figure>


<h3>Trouble Shooting</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>No rule to make target 'debian/certs/test-signing-certs.pem', needed by 'certs/x509_certificate_list'. Stop</span></code></pre></td></tr></table></div></figure>


<p>Solve: comment/delete the corresponding config line.</p>

<h2>Install/Remove the Kernel</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dpkg -i ../linux-image-4.18.10-custom_4.18.10-custom_4.18.10-20181021_amd64.deb
</span><span class='line'>reboot</span></code></pre></td></tr></table></div></figure>


<p>Once booted, we can use <strong>dmesg</strong> to verify our printk message.
Removing kernel can also be done with dpkg.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dpkg -r linux-image-4.18.10-custom</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Solved] FFMPEG: Libmp3lame Not Found]]></title>
    <link href="https://www.yangyang.cloud/blog/2017/10/24/solved-ffmpeg-build-libmp3lame-not-found/"/>
    <updated>2017-10-24T15:09:04+08:00</updated>
    <id>https://www.yangyang.cloud/blog/2017/10/24/solved-ffmpeg-build-libmp3lame-not-found</id>
    <content type="html"><![CDATA[<h3>ERROR: libmp3lame >= 3.98.3 not found</h3>

<p>This configure error occurs when building ffmpeg from with mp3 library (libmp3lame) enabled.</p>

<p>solution: add <strong>-lm</strong> to <strong>extra-libs</strong>, like this</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./configure \
</span><span class='line'>--extra-libs="-lpthread -lm"
</span><span class='line'>...  # other configure options</span></code></pre></td></tr></table></div></figure>


<p>Done!</p>

<h4>HOW</h4>

<p>Check <em>ffbuild/config.log</em>, which shows dynamic linking error of libmp3lame, which requires the math lib.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>util.c:(.text+0x96d): undefined reference to `__exp_finite'
</span><span class='line'>util.c:(.text+0xa41): undefined reference to `__pow_finite'      
</span><span class='line'>layer3.c:(.text+0x2250): undefined reference to `sin'
</span><span class='line'>layer3.c:(.text+0x226a): undefined reference to `cos'       </span></code></pre></td></tr></table></div></figure>


<p>Yeah!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nodejs Circular Dependencies]]></title>
    <link href="https://www.yangyang.cloud/blog/2016/06/28/nodejs-circular-dependencies/"/>
    <updated>2016-06-28T13:23:14+08:00</updated>
    <id>https://www.yangyang.cloud/blog/2016/06/28/nodejs-circular-dependencies</id>
    <content type="html"><![CDATA[<h2>模块循环依赖问题背景</h2>

<p>在Node.js中，模块间的循环依赖(Circular Dependencies)引用如果处理不好，往往会导致很难调试的问题。</p>

<p>常见的问题情形是：新加入一个模块后，先前的某个模块就在开始载入时成为部分加载状态，导致依赖该它的其他模块找不到本应导出的变量或方法。导致模块链接在运行时出错。</p>

<h3>Node.js的module系统支持部分加载</h3>

<p>代码实例如下：</p>

<figure class='code'><figcaption><span>auth.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">user</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./user&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;# in auth: user is&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">user</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">authenticate</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">user</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">enabled</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">authenticate</span><span class="o">:</span> <span class="nx">authenticate</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">enabled</span><span class="o">:</span> <span class="nx">enabled</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;# auth loaded&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>user.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">message</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./message&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;# in user: message is&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">find</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;found user: &#39;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">message</span><span class="p">.</span><span class="nx">hello</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">find</span><span class="o">:</span> <span class="nx">find</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;# user loaded&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>message.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">auth</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./auth&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;# in message: auth is&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">auth</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">hello</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hello, &#39;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// if (auth.enabled(name)) console.log(&#39;hello, &#39; + name);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">hello</span><span class="o">:</span> <span class="nx">hello</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;# message loaded&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>main.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;# main starting&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">auth</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./auth&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;# in main, auth is&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">auth</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;start running...&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">auth</span><span class="p">.</span><span class="nx">authenticate</span><span class="p">(</span><span class="s1">&#39;Alice&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行结果</p>

<figure class='code'><figcaption><span>result</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># main starting</span>
</span><span class='line'><span class="c"># in message: auth is</span>
</span><span class='line'><span class="o">{}</span>
</span><span class='line'><span class="c"># message loaded</span>
</span><span class='line'><span class="c"># in user: message is</span>
</span><span class='line'><span class="o">{</span> hello: <span class="o">[</span>Function: hello<span class="o">]</span> <span class="o">}</span>
</span><span class='line'><span class="c"># user loaded</span>
</span><span class='line'><span class="c"># in auth: user is</span>
</span><span class='line'><span class="o">{</span> find: <span class="o">[</span>Function: find<span class="o">]</span> <span class="o">}</span>
</span><span class='line'><span class="c"># auth loaded</span>
</span><span class='line'><span class="c"># in main, auth is</span>
</span><span class='line'><span class="o">{</span> authenticate: <span class="o">[</span>Function: authenticate<span class="o">]</span>,
</span><span class='line'>      enabled: <span class="o">[</span>Function: enabled<span class="o">]</span> <span class="o">}</span>
</span><span class='line'>start running...
</span><span class='line'>found user: Alice
</span><span class='line'>hello, Alice
</span></code></pre></td></tr></table></div></figure>


<p>三个模块的关系为：auth模块引用user模块，并调用了其导出的find的方法；user模块引用message模块，并调用其导出的hello方法；message模块引用auth模块，但没有调用其任何导出的方法。
main模块引用了auth模块，并调用了其导出的authenticate方法。即程序存在模块循环依赖，但不存在循环模块引用（方法间的循环调用）。</p>

<p>从结果我们可以看出：main函数应用auth模块时，vm根据require规则相继递归加载了user和message模块，message模块先完成全部加载（接着相继是user、auth、main）。注意到，在message加载时，由于auth模块尚未完成加载，在message模块内表现为一个临时的空对象，即部分加载。之后的main加载时，auth模块已经全部完成初始化加载过程，因此可以正常使用了。</p>

<h2>问题引入</h2>

<p>改变message中的hello方法实现（第8、9行），引入循环依赖。</p>

<figure class='code'><figcaption><span>message.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">auth</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./auth&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;# in message: auth is&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">auth</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">hello</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// console.log(&#39;hello, &#39; + name);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">auth</span><span class="p">.</span><span class="nx">enabled</span><span class="p">(</span><span class="nx">name</span><span class="p">))</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hello, &#39;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">hello</span><span class="o">:</span> <span class="nx">hello</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;# message loaded&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>再次运行，结果如下</p>

<figure class='code'><figcaption><span>result</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># main starting</span>
</span><span class='line'><span class="c"># in message: auth is</span>
</span><span class='line'><span class="o">{}</span>
</span><span class='line'><span class="c"># message loaded</span>
</span><span class='line'><span class="c"># in user: message is</span>
</span><span class='line'><span class="o">{</span> hello: <span class="o">[</span>Function: hello<span class="o">]</span> <span class="o">}</span>
</span><span class='line'><span class="c"># user loaded</span>
</span><span class='line'><span class="c"># in auth: user is</span>
</span><span class='line'><span class="o">{</span> find: <span class="o">[</span>Function: find<span class="o">]</span> <span class="o">}</span>
</span><span class='line'><span class="c"># auth loaded</span>
</span><span class='line'><span class="c"># in main, auth is</span>
</span><span class='line'><span class="o">{</span> authenticate: <span class="o">[</span>Function: authenticate<span class="o">]</span>,
</span><span class='line'>  enabled: <span class="o">[</span>Function: enabled<span class="o">]</span> <span class="o">}</span>
</span><span class='line'>start running...
</span><span class='line'>found user: Alice
</span><span class='line'>/xxxx/xxxxx/xxxxx/xxxx/message.js:8
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span>auth.enabled<span class="o">(</span>name<span class="o">))</span> console.log<span class="o">(</span><span class="s1">&#39;hello, &#39;</span> + name<span class="o">)</span><span class="p">;</span>
</span><span class='line'>             ^
</span><span class='line'>
</span><span class='line'>TypeError: auth.enabled is not a <span class="k">function</span>
</span></code></pre></td></tr></table></div></figure>


<p>有了之前的分析，错误的原因也就不难分析了：message模块加载时，auth模块还未初始化完成，即此时还未用已经初始化完成的正确对象来覆盖module.exports对象，从临时的空对象里当然就找不到enabled方法。</p>

<h2>循环依赖解决</h2>

<p>那么可不可以“毕其功于一役”，让每个模块既能在加载时就导出正确的对象，同时将模块中的方法定义和实现推移至运行时再动态改变呢？</p>

<h3>前置模块导出</h3>

<p>前置模块导出的方法，可以做到将模块方法的定义和挂载延迟到运行时，而非在模块第一次加载完成后再用一个变量统一覆盖掉module.exports对象(像举例中的传统模块声明方法)。
因此更高效地利用了部分加载的特性，让模块间彼此更加独立、协作更好。对于刚才的问题，具体的优化实现如下。</p>

<figure class='code'><figcaption><span>auth.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">Module</span> <span class="o">=</span> <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">user</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./user&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;# in auth: user is&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">user</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">authenticate</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">user</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">enabled</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Module</span><span class="p">.</span><span class="nx">authenticate</span> <span class="o">=</span> <span class="nx">authenticate</span><span class="p">;</span>
</span><span class='line'><span class="nx">Module</span><span class="p">.</span><span class="nx">enabled</span> <span class="o">=</span> <span class="nx">enabled</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;# auth loaded&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>user.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">Module</span> <span class="o">=</span> <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">message</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./message&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;# in user: message is&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">find</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;found user: &#39;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">message</span><span class="p">.</span><span class="nx">hello</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Module</span><span class="p">.</span><span class="nx">find</span> <span class="o">=</span> <span class="nx">find</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;# user loaded&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>message.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">Module</span> <span class="o">=</span> <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">auth</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./auth&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;# in message: auth is&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">auth</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">hello</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//console.log(&#39;hello, &#39; + name);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">auth</span><span class="p">.</span><span class="nx">enabled</span><span class="p">(</span><span class="nx">name</span><span class="p">))</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hello, &#39;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Module</span><span class="p">.</span><span class="nx">hello</span> <span class="o">=</span> <span class="nx">hello</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;# message loaded&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>result</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># main starting</span>
</span><span class='line'><span class="c"># in message: auth is</span>
</span><span class='line'><span class="o">{}</span>
</span><span class='line'><span class="c"># message loaded</span>
</span><span class='line'><span class="c"># in user: message is</span>
</span><span class='line'><span class="o">{</span> hello: <span class="o">[</span>Function: hello<span class="o">]</span> <span class="o">}</span>
</span><span class='line'><span class="c"># user loaded</span>
</span><span class='line'><span class="c"># in auth: user is</span>
</span><span class='line'><span class="o">{</span> find: <span class="o">[</span>Function: find<span class="o">]</span> <span class="o">}</span>
</span><span class='line'><span class="c"># auth loaded</span>
</span><span class='line'><span class="c"># in main, auth is</span>
</span><span class='line'><span class="o">{</span> authenticate: <span class="o">[</span>Function: authenticate<span class="o">]</span>,
</span><span class='line'>  enabled: <span class="o">[</span>Function: enabled<span class="o">]</span> <span class="o">}</span>
</span><span class='line'>start running...
</span><span class='line'>found user: Alice
</span><span class='line'>hello, Alice
</span></code></pre></td></tr></table></div></figure>


<p>引用的错误解决，运行正确。</p>

<p>基于这种设计的模块前置导出技术，即“加载时先导出模块、运行时后实现方法”的模块实现思路，可应用于存在多模块间循环依赖引用的情况，从而方便实现逻辑关系更复杂的模块。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker Practice: Storage]]></title>
    <link href="https://www.yangyang.cloud/blog/2016/01/31/docker-practice-storage/"/>
    <updated>2016-01-31T14:03:30+08:00</updated>
    <id>https://www.yangyang.cloud/blog/2016/01/31/docker-practice-storage</id>
    <content type="html"><![CDATA[<h2>Docker基础</h2>

<h3>简介</h3>

<p><a href="https://www.docker.com/what-docker">Docker</a>作为著名的开源容器引擎，在业界有着广泛的使用。
由于使用了现代Linux内核高级特性(如cgroup，namespace)，它可以更高效更安全地使用宿主机的计算、存储、网络等资源。
容器技术作为轻量级的虚拟化技术，相比传统的基于Hypervisor和VM的虚拟化更适合大规模的横向扩展。
容器技术独立与上层应用语言和底层操作系统，将代码和其所依赖的环境整体打包，实现了“构建一次，处处运行”的目标。
在构建应用方面，容器技术可以大大提升运维工作的效率，缩短应用开发上线发布周期，甚至重新定义了软件开发、测试、交付和部署的流程。</p>

<p>本文作为Docker的初级实践总结，描述了Docker的<strong>安装及基本命令</strong>，并以<strong>Redis</strong>和<strong>PostgreSQL</strong>的服务部署为例，记录Docker官方镜像服务部署的过程。</p>

<h3>安装</h3>

<p>在ubuntu 14.04下安装参考<a href="https://docs.docker.com/engine/installation/ubuntulinux/">安装文档</a>，过程如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D
</span><span class='line'>sudo su -c "echo 'deb https://apt.dockerproject.org/repo ubuntu-trusty main' &gt; /etc/apt/sources.list.d/docker.list"
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install docker-engine</span></code></pre></td></tr></table></div></figure>


<h4>免sudo执行docker</h4>

<p>将指定用户加入docker组，并重新登录</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo usermod -aG docker $USER</span></code></pre></td></tr></table></div></figure>


<h4>更改docker默认数据目录</h4>

<p>更改<em>/etc/default/docker</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DOCKER_OPTS="-g /data/var/lib/docker"</span></code></pre></td></tr></table></div></figure>


<p>重启服务</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo service docker restart</span></code></pre></td></tr></table></div></figure>


<h3>基本操作</h3>

<p>常用启动容器实例模式</p>

<p>后台执行容器 <strong>-d</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker run -d ubuntu /bin/bash -c "vmstat 5"  # docker logs -f 查看输出</span></code></pre></td></tr></table></div></figure>


<p>执行完命令即时删除 <strong>&ndash;rm</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker run --rm ubuntu /bin/bash -c "uname -a"</span></code></pre></td></tr></table></div></figure>


<p>交互式 <strong>-it</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker run -it ubuntu /bin/bash   # 操作完成后容器停止，可以start，再attach
</span><span class='line'>docker exec -it CONTAINER_NAME /bin/bash # shell到后台运行的容器</span></code></pre></td></tr></table></div></figure>


<p>查看子命令使用: docker help inspect</p>

<p>列出所有运行的容器列表: docker ps</p>

<p>删除所有容器: docker rm $(docker ps -aq)</p>

<p>搜索镜像: <a href="https://hub.docker.com/">https://hub.docker.com/</a></p>

<h2>Redis服务部署</h2>

<p><a href="http://redis.io/">Redis</a>是开源的内存数据结构存储引擎，常用来实现缓存服务、键值存储引擎以及Pub/Sub引擎等。用Docker部署Redis服务非常便捷。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker run --name myapp-redis -p 127.0.0.1:49514:6379 -d redis</span></code></pre></td></tr></table></div></figure>


<p>Docker会做以下工作:</p>

<p>在本地需找官方<a href="https://hub.docker.com/_/redis/">redis官方镜像</a>，如果没有则下载；用官方镜像启动名为<em>myapp-redis</em>的容器实例；将实例开放的默认redis服务6379端口映射到宿主系统的本地49514端口。</p>

<p>查看redis服务的日志</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker logs -f myapp-redis</span></code></pre></td></tr></table></div></figure>


<p>验证:通过宿主系统的redis客户端访问</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>redis-cli -p 49514</span></code></pre></td></tr></table></div></figure>


<h2>PostgreSQL服务部署</h2>

<p><a href="http://www.postgresql.org/">PostgreSQL</a>是开源的关系型数据库。用Docker部署PostgreSQL服务同样直观便捷。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker run --name myapp-postgres -p 127.0.0.1:49513:5432    \
</span><span class='line'>-v $(pwd)/pg-data:/var/lib/postgresql/data                  \
</span><span class='line'>-e POSTGRES_PASSWORD=postgres                               \
</span><span class='line'>-d postgres</span></code></pre></td></tr></table></div></figure>


<p>同样的，docker会下载<a href="https://hub.docker.com/_/postgres/">postgresql官方镜像</a>，启动myapp-postgres实例，并将服务端口映射到宿主机的49513端口。</p>

<p>注意这里用到<strong>-v</strong>参数，可以为容器的volume(数据卷)指定映射目录。
官方的postgresql镜像将<em>/var/lib/postgresql/data/</em>目录作为volume处理，使得单独存储数据变得简单。
可以简单的理解为将<em>$(pwd)/pg-data</em>作为设备挂载到容器的<em>/var/lib/postgresql/data/</em>目录。这样，备份和迁移都很方便，不依赖容器。</p>

<p><strong>-e</strong>参数为创建容器时指定的环境变量，这里将postrgres超级用户的密码设置为postgres。</p>

<p>然后便可以在宿主机通过posgresql的客户端(如psql、createuser、createdb)访问服务了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 以postgres超级用户测试数据连接
</span><span class='line'>PGPASSWORD=postgres psql -h localhost -p 49513 -U postgres -e
</span><span class='line'># 创建用户myapp，并设置访问权限(可以创建角色和数据库)及密码
</span><span class='line'>PGPASSWORD=postgres createuser -h localhost -p 49513 -U postgres -rdeP myapp
</span><span class='line'># 以新用户创建同名数据库
</span><span class='line'>PGPASSWORD=myapp-pass createdb -h localhost -p 49513 -U myapp -e myapp</span></code></pre></td></tr></table></div></figure>


<p>官方镜像还支持若干个环境变量，如初始superuser的用户名及密码等等。以下一个命令即可完成以上流程。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker run --name myapp-postgres -p 127.0.0.1:49513:5432    \
</span><span class='line'>-v $(pwd)/pg-data:/var/lib/postgresql/data                  \
</span><span class='line'>-e POSTGRES_PASSWORD=myapp-pass -e POSTGRES_USER=myapp      \
</span><span class='line'>-d postgres</span></code></pre></td></tr></table></div></figure>


<h2>总结</h2>

<p>通过以上两个例子，创建了两个容器实例，分别是redis服务和有分离数据卷的postgresql服务。
通过应用Docker容器技术，最核心的是简化测试交付部署流程，并使这些流程更容易地实现自动化。
从而使开发者更多地专注于业务逻辑，加速其价值提升。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Class Inheritance From ES5 to ES6]]></title>
    <link href="https://www.yangyang.cloud/blog/2015/09/10/class-inheritance-from-es5-to-es6/"/>
    <updated>2015-09-10T19:29:24+08:00</updated>
    <id>https://www.yangyang.cloud/blog/2015/09/10/class-inheritance-from-es5-to-es6</id>
    <content type="html"><![CDATA[<h2>Test Case</h2>

<p>For test-driven development, the test case always comes first. The <strong>Phone</strong> inherits the Node.js <strong>EventEmitter</strong>: a phone <strong>is a</strong> customized event emitter, only augmented with its own properties and methods.</p>

<p>A phone has its own <em>name</em>, can <em>powerOn</em> itself.
Since it&rsquo;s an event emitter, it can emit &lsquo;income&rsquo; event, and can set the handler by <em>addListener</em> as event emitter.</p>

<figure class='code'><figcaption><span>test.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">EventEmitter</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;events&#39;</span><span class="p">).</span><span class="nx">EventEmitter</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//var Phone = require(&#39;./phone-es5&#39;);</span>
</span><span class='line'><span class="c1">//var Phone = require(&#39;./phone-util&#39;);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Phone</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./phone-es6&#39;</span><span class="p">);</span>   <span class="c1">// all implementation should have same interface</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">p1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Phone</span><span class="p">(</span><span class="s1">&#39;p1&#39;</span><span class="p">);</span>             <span class="c1">// class instantiation with parameter</span>
</span><span class='line'><span class="nx">p1</span><span class="p">.</span><span class="nx">powerOn</span><span class="p">();</span>                         <span class="c1">// invoke instance methodl</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">p1</span> <span class="k">instanceof</span> <span class="nx">Phone</span><span class="p">);</span>     <span class="c1">// test ISA object of super class</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">p1</span> <span class="k">instanceof</span> <span class="nx">EventEmitter</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">p1</span><span class="p">);</span>                      <span class="c1">// print instance at run-time</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">incomeListener</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;incomming call from: &#39;</span> <span class="o">+</span> <span class="nx">number</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">p1</span><span class="p">.</span><span class="nx">addListener</span><span class="p">(</span><span class="s1">&#39;income&#39;</span><span class="p">,</span> <span class="nx">incomeListener</span><span class="p">);</span>
</span><span class='line'><span class="nx">p1</span><span class="p">.</span><span class="nx">income</span><span class="p">(</span><span class="s1">&#39;+4478123456&#39;</span><span class="p">);</span>             <span class="c1">// invoke instance method</span>
</span><span class='line'><span class="nx">Phone</span><span class="p">.</span><span class="nx">vendor</span><span class="p">(</span><span class="s1">&#39;xiaomi&#39;</span><span class="p">);</span>               <span class="c1">// static/class method</span>
</span></code></pre></td></tr></table></div></figure>


<p>Expect the following desired output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Phone instance method] p1 is powered on.
</span><span class='line'>true
</span><span class='line'>true
</span><span class='line'>Phone {
</span><span class='line'>  domain: null,
</span><span class='line'>  _events: {},
</span><span class='line'>  _eventsCount: 0,
</span><span class='line'>  _maxListeners: 20,
</span><span class='line'>  name: 'p1' }
</span><span class='line'>incomming call from: +4478123456
</span><span class='line'>[Phone static method] vendor: xiaomi</span></code></pre></td></tr></table></div></figure>


<h2>Prototype-Based Inheritance in ES5</h2>

<p>In fact, javascript object is prototype-based, there isn&rsquo;t <em>class</em> at all, everything in javascript is object.
There&rsquo;s only <em>Object Extension</em> (extends an exists object to a new object), rather than <em>Class Inheritance</em> (create new subclass that inherits the parent class).
To implement Inheritance is to build/extend the appropriate prototype chain.
The prototype-based inheritance is more flexible, and it&rsquo;s easy to emulate traditional textbook or java-like class or inheritance.</p>

<figure class='code'><figcaption><span>phone-es5.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">EventEmitter</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;events&#39;</span><span class="p">).</span><span class="nx">EventEmitter</span><span class="p">;</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">Phone</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">EventEmitter</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>    <span class="c1">// call parent&#39;s constructor</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">setMaxListeners</span><span class="p">(</span><span class="mi">20</span><span class="p">);</span>   <span class="c1">// customize with parent&#39;s method</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>           <span class="c1">// self field</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">Phone</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EventEmitter</span><span class="p">();</span>
</span><span class='line'><span class="c1">// same as: Phone.prototype = Object.create(EventEmitter.prototype);</span>
</span><span class='line'><span class="nx">Phone</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">=</span> <span class="nx">Phone</span><span class="p">;</span>
</span><span class='line'><span class="nx">Phone</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">powerOn</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;[Phone instance method] &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s1">&#39; is powered on.&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">Phone</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">income</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;income&#39;</span><span class="p">,</span> <span class="nx">number</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">Phone</span><span class="p">.</span><span class="nx">vendor</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;[Phone static method] vendor: &#39;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">Phone</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Using Node.js util.inherits</h2>

<p>Node.js util module provides syntactical sugar for easily implemention of class-like inheritance.</p>

<figure class='code'><figcaption><span>phone-util.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">EventEmitter</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;events&#39;</span><span class="p">).</span><span class="nx">EventEmitter</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">util</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;util&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">Phone</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">EventEmitter</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>    <span class="c1">// call parent&#39;s constructor</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">setMaxListeners</span><span class="p">(</span><span class="mi">20</span><span class="p">);</span>   <span class="c1">// customize with parent&#39;s method</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>           <span class="c1">// self field</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">util</span><span class="p">.</span><span class="nx">inherits</span><span class="p">(</span><span class="nx">Phone</span><span class="p">,</span> <span class="nx">EventEmitter</span><span class="p">);</span>
</span><span class='line'><span class="nx">Phone</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">powerOn</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;[Phone instance method] &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s1">&#39; is powered on.&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">Phone</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">income</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;income&#39;</span><span class="p">,</span> <span class="nx">number</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">Phone</span><span class="p">.</span><span class="nx">vendor</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;[Phone static method] vendor: &#39;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">Phone</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>util.inherits levarages Object.create() of ES5, the inherits line equals to:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Phone</span><span class="p">.</span><span class="nx">super_</span> <span class="o">=</span> <span class="nx">EventEmitter</span><span class="p">;</span>
</span><span class='line'><span class="nx">Phone</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">EventEmitter</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">constructor</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">value</span><span class="o">:</span> <span class="nx">Phone</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">writable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">configurable</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Class Syntax of ES6</h2>

<p>From node-v4.0, lots of ES6 features are implemented by default(shipping). Such as <em>block scoping</em>, <em>collections</em>, <em>promises</em> and <em>Arrow Functions</em>. And <em>Class</em> syntax is also fully supported. But, note that <em>class</em> is just another syntactical sugar:</p>

<blockquote><p>JavaScript classes are introduced in ECMAScript 6 and are syntactical sugar over JavaScript's existing prototype-based inheritance.<br/>The class syntax is not introducing a new object-oriented inheritance model to JavaScript.<br/>JavaScript classes provide a much simpler and clearer syntax to create objects and deal with inheritance.</p></blockquote>


<p>With <em>class</em> syntax, class/inheritance can be implemented in a more straightforward manner.</p>

<figure class='code'><figcaption><span>phone-es6.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;use strict&#39;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">EventEmitter</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;events&#39;</span><span class="p">).</span><span class="nx">EventEmitter</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">Phone</span> <span class="kr">extends</span> <span class="nx">EventEmitter</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">super</span><span class="p">()</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">setMaxListeners</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">powerOn</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;[Phone instance method] &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s1">&#39; is powered on.&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">income</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;income&#39;</span><span class="p">,</span> <span class="nx">number</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kr">static</span> <span class="nx">vendor</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="err">`</span><span class="p">[</span><span class="nx">Phone</span> <span class="kr">static</span> <span class="nx">method</span><span class="p">]</span> <span class="nx">vendor</span><span class="o">:</span> <span class="nx">$</span><span class="p">{</span><span class="nx">name</span><span class="p">}</span><span class="err">`</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">Phone</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note: &lsquo;use strict&rsquo; is required, and we use the template string syntax in static method (class method).
And <em>class</em> declaration (as well as <em>let</em>, <em>const</em>, and <em>function</em> in strict mode) cannot be hoisted, unlike <em>var</em> and <em>function</em>.</p>

<p>In summary, with ES6 support in Node.js v4.0, class inheritance has never been more easier. So, let&rsquo;s embrace ES6.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSH Port Forwarding]]></title>
    <link href="https://www.yangyang.cloud/blog/2015/08/17/ssh-port-forwarding/"/>
    <updated>2015-08-17T09:29:47+08:00</updated>
    <id>https://www.yangyang.cloud/blog/2015/08/17/ssh-port-forwarding</id>
    <content type="html"><![CDATA[<h2>Overview</h2>

<p>利用SSH端口转发，可以方便实现各类翻墙打洞需求。本文详细介绍SSH端口转发的三种用法，以及其所适用的场景。</p>

<h2>Environment</h2>

<ul>
<li><strong>L0</strong>: localhost behind <em>NAT</em>, with lan ip <strong>192.168.0.100</strong></li>
<li><strong>L1</strong>: host within same lan of L0, with lan ip <strong>192.168.0.101</strong></li>
<li><strong>R0</strong>: remote host (<em>cloud vps</em>) with private ip <strong>10.0.0.100</strong></li>
<li><strong>R1</strong>: remote host (<em>cloud vps</em>) with private ip <strong>10.0.0.101</strong></li>
</ul>


<p>L0 can ssh (default port 22) to R0 by its public domain name <strong>r0.example.com</strong> with public key, like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh user@r0.example.com</span></code></pre></td></tr></table></div></figure>


<p><img src="https://www.yangyang.cloud/images/ssh-port-forwarding/0.png" alt="" /></p>

<h2>Forwarding local host (-L)</h2>

<h3>Usage</h3>

<blockquote><p>Specifies that the given port on the local (client) host is to be forwarded to the given host and port on the remote side.</p></blockquote>


<p>SSH -L is good for exposing a remote port locally.</p>

<p>增强本地主机的访问远程主机（局域网）能力。</p>

<h3>Example</h3>

<h4>1. Forward L0 to R0</h4>

<p>The mongod has the http web service, listening only on localhost:28017. With the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -NL 28018:localhost:28017 user@r0.example.com</span></code></pre></td></tr></table></div></figure>


<p>Then the remote service on 28017 will be accessed on L0&rsquo;s 28018 port from L0.
<img src="https://www.yangyang.cloud/images/ssh-port-forwarding/1.png" alt="" /></p>

<h4>2. Forward L0 to R1</h4>

<p>Suggest that there&rsquo;s an API server on R1, listening only on port 10030 of lan (10.0.0.0/24).
Because R0 can access R1&rsquo;s private address of the same lan, so the following command will make R1&rsquo;s service of port 10030 accessible from L0&rsquo;s local port 10031.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -NL 10031:10.0.0.101:10030 user@r0.example.com</span></code></pre></td></tr></table></div></figure>


<p>Note, use R1&rsquo;s private ip <em>10.0.0.101</em> instead of <em>localhost</em>.</p>

<p><img src="https://www.yangyang.cloud/images/ssh-port-forwarding/2.png" alt="" /></p>

<h4>3. Forward L1 to R1</h4>

<p>Say R0 can access R1 through ssh command: ssh secret-user@10.0.0.101, then the following command</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -NL 192.168.0.100:2222:10.0.0.101:22 user@r0.example.com</span></code></pre></td></tr></table></div></figure>


<p>will forward L0&rsquo;s port 2222 to the R1&rsquo;s port 22, and even make L0 listening within the lan. So from L1, we can access to R1 by this command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -p 2222 secret-user@192.168.0.100</span></code></pre></td></tr></table></div></figure>


<p><img src="https://www.yangyang.cloud/images/ssh-port-forwarding/3.png" alt="" />
Awesome!</p>

<h2>Forwarding remote host (-R)</h2>

<h3>Usage</h3>

<blockquote><p>Specifies that the given port on the remote (server) host is to be forwarded to the given host and port on the local side.</p></blockquote>


<p>So the SSH -R can be useful when accessing a box hidden behind a NAT.</p>

<p>增强远端主机的访问本地主机（局域网）的能力。</p>

<h3>Example</h3>

<h4>1. Forward R0 to L0</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -NR 2222:localhost:22 user@r0.example.com</span></code></pre></td></tr></table></div></figure>


<p><img src="https://www.yangyang.cloud/images/ssh-port-forwarding/4.png" alt="" /></p>

<h4>2. Forward R0 to L1</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -NR 2222:192.168.0.101:22 user@r0.example.com</span></code></pre></td></tr></table></div></figure>


<p><img src="https://www.yangyang.cloud/images/ssh-port-forwarding/5.png" alt="" /></p>

<h4>3. Forward R1 to L1</h4>

<p>Unlike local forwarding, remote forwarding from R1 to L1 is not permitted by default due to security policy,
unless we change <em>sshd_config</em> file on <strong>R0</strong>, with the additional config line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GatewayPorts = yes</span></code></pre></td></tr></table></div></figure>


<p>then the ultimate tunnel created, with which we can access L1&rsquo;s port on machine R1. Cool?</p>

<h2>Dynamic forwarding (-D)</h2>

<h3>Usage</h3>

<blockquote><p>Specifies a local “dynamic” application-level port forwarding...and ssh will act as a SOCKS server.</p></blockquote>


<h3>Example</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -ND 1080 user@r0.example.com</span></code></pre></td></tr></table></div></figure>


<p>Then, there exists a SOCKS server on L0, and we can use it as a proxy server.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -x socks5h://localhost:1080 https://www.google.com</span></code></pre></td></tr></table></div></figure>


<p><img src="https://www.yangyang.cloud/images/ssh-port-forwarding/7.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shadowsocks Tutorial]]></title>
    <link href="https://www.yangyang.cloud/blog/2015/07/29/shadowsocks-tutorial/"/>
    <updated>2015-07-29T19:37:13+08:00</updated>
    <id>https://www.yangyang.cloud/blog/2015/07/29/shadowsocks-tutorial</id>
    <content type="html"><![CDATA[<h2>Overview</h2>

<h3>socks5</h3>

<p>Socket Secure (SOCKS) is an Internet protocol that routes network packets between a client and server through a proxy server. SOCKS5 additionally provides authentication so only authorized users may access a server.</p>

<p>Practically, a SOCKS server proxies TCP connections to an arbitrary IP address, and provides a means for UDP packets to be forwarded.SOCKS operates at a lower level than HTTP proxying: SOCKS uses a handshake protocol to inform the proxy software about the connection that the client is trying to make, and then acts as transparently as possible. SOCKS proxies can also forward UDP traffic and work in reverse.</p>

<h3>shadowsocks</h3>

<p><a href="https://github.com/shadowsocks/shadowsocks">Shadowsocks</a> is a fast tunnel proxy that can help bypass firewalls.</p>

<h3>test environment</h3>

<p>Remote VPS OS: Ubuntu-14.04 Server VPS on DigitalOcean</p>

<p>Local Client OS: Ubuntu-14.04 Desktop</p>

<h2>Installation</h2>

<h3>install package</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install python-pip
</span><span class='line'>sudo pip install shadowsocks</span></code></pre></td></tr></table></div></figure>


<h3>remote server</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssserver -k PASSWORD -d start</span></code></pre></td></tr></table></div></figure>


<p>This will run shadowsocks remote server listening at <strong>0.0.0.0:8388</strong></p>

<h3>local server</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sslocal -s VPS -k PASSWORD</span></code></pre></td></tr></table></div></figure>


<p>This will run shadowsocks local server listening at <strong>127.0.0.1:1080</strong></p>

<h2>Client Configuration</h2>

<h3>Web Browser</h3>

<p>Thanks for proxy setting extension like <a href="http://getfoxyproxy.org/">FoxyProxy</a> in Firefox, <a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif">SwitchyOmega</a> in Chrome, socks proxy tunnel can be easily configured.</p>

<p>Choose <strong>socks v5</strong> protocal at localhost:1080, and get it work.</p>

<h3>Curl</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -x socks5h://localhost https://www.google.com</span></code></pre></td></tr></table></div></figure>


<p>Note that we specify protocal as <strong>socks5h</strong> instead of socks5, which means we use the specified SOCKS5 proxy, and let the proxy resolve the host name, otherwise it may not resolve hostname. And port 1080 is by default.</p>

<h3>Nodejs Request</h3>

<p><a href="https://www.npmjs.com/package/request">request</a> utility doesn&rsquo;t support socks proxy by default, so we need <a href="https://www.npmjs.com/package/socks5-http-client">socks5-http-client</a> and <a href="https://www.npmjs.com/package/socks5-https-client">socks5-https-client</a> to create agent.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var request = require('request');
</span><span class='line'>var url = require('url');
</span><span class='line'>var socks5HttpAgent = require('socks5-http-client/lib/Agent');
</span><span class='line'>var socks5HttpsAgent = require('socks5-https-client/lib/Agent');
</span><span class='line'>
</span><span class='line'>var urlString = process.argv[2];
</span><span class='line'>var url = url.parse(urlString);
</span><span class='line'>var agentClass = (url.protocol === 'https:') ? socks5HttpsAgent : socks5HttpAgent;
</span><span class='line'>var agentOptions = {
</span><span class='line'>  socksHost: 'localhost', // defaults to localhost
</span><span class='line'>  socksPort: 1080         // defaults to 1080
</span><span class='line'>};
</span><span class='line'>var options = {
</span><span class='line'>  uri: url,
</span><span class='line'>  agentClass: agentClass,
</span><span class='line'>  agentOptions: agentOptions,
</span><span class='line'>  method: 'GET'
</span><span class='line'>};
</span><span class='line'>request(options, function(err, res, body) {
</span><span class='line'>  if (err) console.log(err.message);
</span><span class='line'>  else {
</span><span class='line'>    console.log(res.statusCode);
</span><span class='line'>    console.log(body);
</span><span class='line'>  }
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>Finally, test it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>node socks-proxy.js http://www.google.com
</span><span class='line'>node socks-proxy.js https://www.google.com</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Session With Express and Nginx]]></title>
    <link href="https://www.yangyang.cloud/blog/2015/07/17/session-with-express-and-nginx/"/>
    <updated>2015-07-17T17:12:56+08:00</updated>
    <id>https://www.yangyang.cloud/blog/2015/07/17/session-with-express-and-nginx</id>
    <content type="html"><![CDATA[<h2>为什么一定要持久化存储会话信息</h2>

<p>如果会话信息仅仅存储在内存&hellip;</p>

<ul>
<li>服务器重启，用户将会登出</li>
<li>无法在多个node进程(或集群环境)中共享会话</li>
</ul>


<p>所以，会话(无论是HTTP会话还是Web-Socket会话)都需要在服务器端持久化存储在数据库中，如Redis/Mongo。</p>

<p>环境： Express 4.12.2， Nginx 1.8.0</p>

<h2>Express添加Redis会话存储</h2>

<p>需要的相关库或组件：</p>

<ul>
<li><a href="https://www.npmjs.com/package/connect-redis">connect-redis</a>: Redis会话存储。</li>
<li><a href="https://www.npmjs.com/package/socket.io-redis">socket.io-redis</a>: 多个socket.io进程实例可以彼此触发/广播事件。</li>
</ul>


<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var http = require('http');
</span><span class='line'>var socketio = require('socket.io');
</span><span class='line'>var session = require('express-session');           // 会话支持
</span><span class='line'>var passport = require('passport');                 // 身份认证，依赖express-session
</span><span class='line'>var RedisStore = require('connect-redis')(session); // redis存储，用于持久化会话
</span><span class='line'>var RedisAdapter = require('socket.io-redis');      // 存储web-socket的连接
</span><span class='line'>var mongoose = require('mongoose');
</span><span class='line'>// ...
</span><span class='line'>var app = express();
</span><span class='line'>var server = http.Server(app);
</span><span class='line'>var sio = socketio(server);</span></code></pre></td></tr></table></div></figure>


<p>配置Redis会话存储HTTP会话</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var sessionMiddleware = session({
</span><span class='line'>  name: 'XXX:sess',
</span><span class='line'>  secret: 'XXX',
</span><span class='line'>  proxy: true,
</span><span class='line'>  resave: false,
</span><span class='line'>  store: new RedisStore(),
</span><span class='line'>  saveUninitialized: false,
</span><span class='line'>  cookie: {
</span><span class='line'>    //secure: true, // only https
</span><span class='line'>    maxAge: 7*24*60*60*1000 // 1 week
</span><span class='line'>  }
</span><span class='line'>});
</span><span class='line'>// 应用会话存储中间件
</span><span class='line'>app.use(sessionMiddleware);
</span><span class='line'>// passport登录认证
</span><span class='line'>app.use(passport.initialize());
</span><span class='line'>app.use(passport.session());</span></code></pre></td></tr></table></div></figure>


<p>配置Redis会话存储Web-Socket会话</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sio.adapter(RedisAdapter({host: 'localhost', port: 6379}));
</span><span class='line'>// 为socket server添加redis存储的中间件
</span><span class='line'>sio.use(function(socket, next) {
</span><span class='line'>  sessionMiddleware(socket.request, socket.request.res, next);
</span><span class='line'>});
</span><span class='line'>// 对未登录的用户禁用socket支持
</span><span class='line'>sio.use(function(socket, next){
</span><span class='line'>  var passport = socket.request.session.passport;
</span><span class='line'>  if (!passport || !passport.user) {
</span><span class='line'>    logger.debug('no socket support without login');
</span><span class='line'>    next(new Error('Authentication error'));
</span><span class='line'>  }
</span><span class='line'>  else next();
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<h2>Nginx配置支持负载均衡</h2>

<p>Web-Socket的连接建立需要同一个tcp连接上的多次握手支持，要求比一般的HTTP会话高一些。
所以为实现多进程的共享会话支持，需要配置支持iphash的upstream。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>upstream nodes {
</span><span class='line'>  ip_hash;
</span><span class='line'>  server localhost:8001;
</span><span class='line'>  server localhost:8002;
</span><span class='line'>  server localhost:8003;
</span><span class='line'>  server localhost:8004;
</span><span class='line'>  keepalive 512;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>server{
</span><span class='line'>  listen 443 ssl;
</span><span class='line'>  server_name example.com;
</span><span class='line'>  location / {
</span><span class='line'>    proxy_set_header Upgrade $http_upgrade;
</span><span class='line'>    proxy_set_header Connection "upgrade";
</span><span class='line'>    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
</span><span class='line'>    proxy_set_header Host $host;
</span><span class='line'>    proxy_http_version 1.1;
</span><span class='line'>    proxy_pass http://nodes;
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>注意，可以用pm2启动多个node服务进程，但必须以fork mode启动，而不是-i的集群方式启动，负载均衡完全交给nginx即可。
如此：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pm2 start -f --name web1 app.js -- 8001
</span><span class='line'>pm2 start -f --name web2 app.js -- 8002
</span><span class='line'>pm2 start -f --name web3 app.js -- 8003
</span><span class='line'>pm2 start -f --name web4 app.js -- 8004</span></code></pre></td></tr></table></div></figure>


<h2>参考资料</h2>

<p><a href="http://socket.io/docs/using-multiple-nodes/">Socket.io doc: using multiple nodes</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Memcache With PHP]]></title>
    <link href="https://www.yangyang.cloud/blog/2015/07/16/installing-memcache-with-php/"/>
    <updated>2015-07-16T20:34:27+08:00</updated>
    <id>https://www.yangyang.cloud/blog/2015/07/16/installing-memcache-with-php</id>
    <content type="html"><![CDATA[<h2>install memcached</h2>

<p>  OS: Ubuntu-14.04 server</p>

<p>  PHP: 5.6.8 source build</p>

<h3>install memcached with apt-get</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install memcached</span></code></pre></td></tr></table></div></figure>


<h3>verification</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo "stats settings" | nc localhost 11211</span></code></pre></td></tr></table></div></figure>


<h2>install memcache php extension</h2>

<h3>download source from pecl</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget http://pecl.php.net/get/memcache-2.2.7.tgz</span></code></pre></td></tr></table></div></figure>


<h3>install with pecl</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/path/to/php/bin/pecl install /path/to/memcache-2.2.7.tgz</span></code></pre></td></tr></table></div></figure>


<p>There exsists the <em>lib/php/extensions/no-debug-non-zts-XXXXXXX/memcache.so</em></p>

<h3>update the <em>php.ini</em></h3>

<p>add &ldquo;extension=memcache.so&rdquo; to php.ini</p>

<h3>reload php-fpm server</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kill -USR2 $(cat /path/to/php/var/run/php-fpm.pid) # no need sudo</span></code></pre></td></tr></table></div></figure>


<p>Check the php.info page, make sure that memcache section exists</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blog Writing With Octopress 3]]></title>
    <link href="https://www.yangyang.cloud/blog/2015/07/15/blog-writing-with-octopress-3/"/>
    <updated>2015-07-15T20:38:31+08:00</updated>
    <id>https://www.yangyang.cloud/blog/2015/07/15/blog-writing-with-octopress-3</id>
    <content type="html"><![CDATA[<h2>initialize workspace</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  git clone git@github.com:Pro-YY/pro-yy.github.io.git -b source
</span><span class='line'>  cd pro-yy.github.io/
</span><span class='line'>  git clone git@github.com:Pro-YY/pro-yy.github.io.git -b master _deploy
</span><span class='line'>  apt install ruby-bundler ruby-dev
</span><span class='line'>  bundle install</span></code></pre></td></tr></table></div></figure>


<h2>write post</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  rake new_post["Blog Writing with Octopress 3"]
</span><span class='line'>  vim source/_posts/2015-07-15-blog-writing-with-octopress-3.markdown</span></code></pre></td></tr></table></div></figure>


<h2>preview</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  rake generate
</span><span class='line'>  rake preview</span></code></pre></td></tr></table></div></figure>


<p>preview at <a href="http://localhost:4000">http://localhost:4000</a></p>

<h2>deploy</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  rake deploy</span></code></pre></td></tr></table></div></figure>


<h2>commit source</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  git commit -asm 'new post'
</span><span class='line'>  git push</span></code></pre></td></tr></table></div></figure>


<h2>update octopress</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  git remote add octopress git://github.com/imathis/octopress.git
</span><span class='line'>  git pull octopress master
</span><span class='line'>  bundle install
</span><span class='line'>  rake update_source
</span><span class='line'>  rake update_style</span></code></pre></td></tr></table></div></figure>


<h2>category list/cloud</h2>

<p>plugin from <a href="https://github.com/alswl/octopress-category-list">https://github.com/alswl/octopress-category-list</a></p>
]]></content>
  </entry>
  
</feed>
