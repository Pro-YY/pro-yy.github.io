<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[YangYang's Notes]]></title>
  <link href="https://www.yangyang.cloud/atom.xml" rel="self"/>
  <link href="https://www.yangyang.cloud/"/>
  <updated>2018-10-22T17:04:40+08:00</updated>
  <id>https://www.yangyang.cloud/</id>
  <author>
    <name><![CDATA[YangYang(杨阳)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Compile Kernel With Kali Linux]]></title>
    <link href="https://www.yangyang.cloud/blog/2018/10/22/compile-kernel-with-kali-linux/"/>
    <updated>2018-10-22T09:57:10+08:00</updated>
    <id>https://www.yangyang.cloud/blog/2018/10/22/compile-kernel-with-kali-linux</id>
    <content type="html"><![CDATA[<p>With the instructions in <a href="https://docs.kali.org/development/recompiling-the-kali-linux-kernel">Recompiling the Kali Linux Kernel</a>, we can recompile the whole linux kernel of our kali linux.</p>

<h2>Install Dependencies</h2>

<p>We need to start by installing several build dependency packages, some of them may have already been in installed.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apt install build-essential libncurses5-dev fakeroot bison libssl-dev libelf-dev</span></code></pre></td></tr></table></div></figure>


<h2>Download the Kernel Source</h2>

<p>For my system, the kernel version is 4.18, which will be used in following example. Of course, the workflow of other version is just the same.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>apt install linux-source-4.18
</span><span class='line'>[...]
</span><span class='line'>ls /usr/src
</span><span class='line'>linux-config-4.18 linux-patch-4.18-rt.patch.xz linux-source-4.18.tar.xz</span></code></pre></td></tr></table></div></figure>


<p>Then we get the compressed archive of the kernel sources, and we&rsquo;ll extract these files in our working directory, (no special permission need for compiling the kernel). In our example, we use <em>/opt/kernel</em>, and the <em>~/kernel</em> is also an appropriate place.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mkdir /opt/kernel; cd /opt/kernel
</span><span class='line'>tar -xaf /usr/src/linux-source-4.18.tar.xz</span></code></pre></td></tr></table></div></figure>


<p>Optionally, we may also apply the <em>rt</em> patch, which is for real-time os features.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /opt/kernel/linux-source-4.18
</span><span class='line'>xzcat /usr/src/linux-patch-4.18-rt.patch.xz | patch -p1</span></code></pre></td></tr></table></div></figure>


<h2>Configure the Kernel</h2>

<p>When building a more recent version of kernel (possibley with an specific patch), the configuration should at first be kept as close as possible to the current running kernel, shown by <strong>uname -r</strong>. It is sufficient to just copy the currently-used kernel config to the source directory.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /opt/kernel/linux-source-4.18
</span><span class='line'>cp /boot/config-4.18.0-kali2-amd64 .config</span></code></pre></td></tr></table></div></figure>


<p>If you need to make some changes or dicide to reconfigure all things from scratch, just call <strong>make menuconfig</strong> command and inspect all the details.
Note: we can tweak a lot in this phase.</p>

<h2>Write Some Code</h2>

<p>Add one line of code for test(fun), in file <em>init/main.c</em>, <strong>start_kernel</strong> function</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pr_notice("Brookes's customized kernel starting: %s %d\n", __FUNCTION__, __LINE__);
</span><span class='line'>pr_notice("%s", linux_banner);</span></code></pre></td></tr></table></div></figure>


<h2>Build the Kernel</h2>

<p>Once configured, we can <strong>make</strong> the kernel. Rather than invoking <strong>make deb-pkg</strong> as the official doc suggested, we use <strong>make bindeb-pkg</strong> here, which will not generate debian source package, or invoke <strong>make clean</strong>.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>time make -j4 bindeb-pkg LOCALVERSION=-custom KDEB_PKGVERSION=$(make kernelversion)-$(date +%Y%m%d)</span></code></pre></td></tr></table></div></figure>


<p>After a while, we get folowing package in the parent directory</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>linux-headers-4.18.10-custom_4.18.10-20181021_amd64.deb   # headers
</span><span class='line'>linux-image-4.18.10-custom_4.18.10-20181021_amd64.deb     # kernel image
</span><span class='line'>linux-image-4.18.10-custom-dbg_4.18.10-20181021_amd64.deb # kernel image with debugging symbols
</span><span class='line'>linux-libc-dev_4.18.10-20181021_amd64.deb                 # headers of user-space library</span></code></pre></td></tr></table></div></figure>


<h3>Trouble Shooting</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>No rule to make target 'debian/certs/test-signing-certs.pem', needed by 'certs/x509_certificate_list'. Stop</span></code></pre></td></tr></table></div></figure>


<p>Solve: comment/delete the corresponding config line.</p>

<h2>Install/Remove the Kernel</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dpkg -i ../linux-image-4.18.10-custom_4.18.10-custom_4.18.10-20181021_amd64.deb
</span><span class='line'>reboot</span></code></pre></td></tr></table></div></figure>


<p>Once booted, we can use <strong>dmesg</strong> to verify our printk message.
Removing kernel can also be done with dpkg.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>dpkg -r linux-image-4.18.10-custom</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[Solved] FFMPEG: Libmp3lame Not Found]]></title>
    <link href="https://www.yangyang.cloud/blog/2017/10/24/solved-ffmpeg-build-libmp3lame-not-found/"/>
    <updated>2017-10-24T15:09:04+08:00</updated>
    <id>https://www.yangyang.cloud/blog/2017/10/24/solved-ffmpeg-build-libmp3lame-not-found</id>
    <content type="html"><![CDATA[<h3>ERROR: libmp3lame >= 3.98.3 not found</h3>

<p>This configure error occurs when building ffmpeg from with mp3 library (libmp3lame) enabled.</p>

<p>solution: add <strong>-lm</strong> to <strong>extra-libs</strong>, like this</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>./configure \
</span><span class='line'>--extra-libs="-lpthread -lm"
</span><span class='line'>...  # other configure options</span></code></pre></td></tr></table></div></figure>


<p>Done!</p>

<h4>HOW</h4>

<p>Check <em>ffbuild/config.log</em>, which shows dynamic linking error of libmp3lame, which requires the math lib.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>util.c:(.text+0x96d): undefined reference to `__exp_finite'
</span><span class='line'>util.c:(.text+0xa41): undefined reference to `__pow_finite'      
</span><span class='line'>layer3.c:(.text+0x2250): undefined reference to `sin'
</span><span class='line'>layer3.c:(.text+0x226a): undefined reference to `cos'       </span></code></pre></td></tr></table></div></figure>


<p>Yeah!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nodejs Circular Dependencies]]></title>
    <link href="https://www.yangyang.cloud/blog/2016/06/28/nodejs-circular-dependencies/"/>
    <updated>2016-06-28T13:23:14+08:00</updated>
    <id>https://www.yangyang.cloud/blog/2016/06/28/nodejs-circular-dependencies</id>
    <content type="html"><![CDATA[<h2>模块循环依赖问题背景</h2>

<p>在Node.js中，模块间的循环依赖(Circular Dependencies)引用如果处理不好，往往会导致很难调试的问题。</p>

<p>常见的问题情形是：新加入一个模块后，先前的某个模块就在开始载入时成为部分加载状态，导致依赖该它的其他模块找不到本应导出的变量或方法。导致模块链接在运行时出错。</p>

<h3>Node.js的module系统支持部分加载</h3>

<p>代码实例如下：</p>

<figure class='code'><figcaption><span>auth.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">user</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./user&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;# in auth: user is&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">user</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">authenticate</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">user</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">enabled</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">authenticate</span><span class="o">:</span> <span class="nx">authenticate</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">enabled</span><span class="o">:</span> <span class="nx">enabled</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;# auth loaded&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>user.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">message</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./message&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;# in user: message is&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">find</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;found user: &#39;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">message</span><span class="p">.</span><span class="nx">hello</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">find</span><span class="o">:</span> <span class="nx">find</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;# user loaded&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>message.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">auth</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./auth&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;# in message: auth is&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">auth</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">hello</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hello, &#39;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">);</span>
</span><span class='line'>    <span class="c1">// if (auth.enabled(name)) console.log(&#39;hello, &#39; + name);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">hello</span><span class="o">:</span> <span class="nx">hello</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;# message loaded&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>main.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;# main starting&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">auth</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./auth&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;# in main, auth is&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">auth</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;start running...&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">auth</span><span class="p">.</span><span class="nx">authenticate</span><span class="p">(</span><span class="s1">&#39;Alice&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>运行结果</p>

<figure class='code'><figcaption><span>result</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># main starting</span>
</span><span class='line'><span class="c"># in message: auth is</span>
</span><span class='line'><span class="o">{}</span>
</span><span class='line'><span class="c"># message loaded</span>
</span><span class='line'><span class="c"># in user: message is</span>
</span><span class='line'><span class="o">{</span> hello: <span class="o">[</span>Function: hello<span class="o">]</span> <span class="o">}</span>
</span><span class='line'><span class="c"># user loaded</span>
</span><span class='line'><span class="c"># in auth: user is</span>
</span><span class='line'><span class="o">{</span> find: <span class="o">[</span>Function: find<span class="o">]</span> <span class="o">}</span>
</span><span class='line'><span class="c"># auth loaded</span>
</span><span class='line'><span class="c"># in main, auth is</span>
</span><span class='line'><span class="o">{</span> authenticate: <span class="o">[</span>Function: authenticate<span class="o">]</span>,
</span><span class='line'>      enabled: <span class="o">[</span>Function: enabled<span class="o">]</span> <span class="o">}</span>
</span><span class='line'>start running...
</span><span class='line'>found user: Alice
</span><span class='line'>hello, Alice
</span></code></pre></td></tr></table></div></figure>


<p>三个模块的关系为：auth模块引用user模块，并调用了其导出的find的方法；user模块引用message模块，并调用其导出的hello方法；message模块引用auth模块，但没有调用其任何导出的方法。
main模块引用了auth模块，并调用了其导出的authenticate方法。即程序存在模块循环依赖，但不存在循环模块引用（方法间的循环调用）。</p>

<p>从结果我们可以看出：main函数应用auth模块时，vm根据require规则相继递归加载了user和message模块，message模块先完成全部加载（接着相继是user、auth、main）。注意到，在message加载时，由于auth模块尚未完成加载，在message模块内表现为一个临时的空对象，即部分加载。之后的main加载时，auth模块已经全部完成初始化加载过程，因此可以正常使用了。</p>

<h2>问题引入</h2>

<p>改变message中的hello方法实现（第8、9行），引入循环依赖。</p>

<figure class='code'><figcaption><span>message.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">auth</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./auth&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;# in message: auth is&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">auth</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">hello</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// console.log(&#39;hello, &#39; + name);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">auth</span><span class="p">.</span><span class="nx">enabled</span><span class="p">(</span><span class="nx">name</span><span class="p">))</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hello, &#39;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">hello</span><span class="o">:</span> <span class="nx">hello</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;# message loaded&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>再次运行，结果如下</p>

<figure class='code'><figcaption><span>result</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># main starting</span>
</span><span class='line'><span class="c"># in message: auth is</span>
</span><span class='line'><span class="o">{}</span>
</span><span class='line'><span class="c"># message loaded</span>
</span><span class='line'><span class="c"># in user: message is</span>
</span><span class='line'><span class="o">{</span> hello: <span class="o">[</span>Function: hello<span class="o">]</span> <span class="o">}</span>
</span><span class='line'><span class="c"># user loaded</span>
</span><span class='line'><span class="c"># in auth: user is</span>
</span><span class='line'><span class="o">{</span> find: <span class="o">[</span>Function: find<span class="o">]</span> <span class="o">}</span>
</span><span class='line'><span class="c"># auth loaded</span>
</span><span class='line'><span class="c"># in main, auth is</span>
</span><span class='line'><span class="o">{</span> authenticate: <span class="o">[</span>Function: authenticate<span class="o">]</span>,
</span><span class='line'>  enabled: <span class="o">[</span>Function: enabled<span class="o">]</span> <span class="o">}</span>
</span><span class='line'>start running...
</span><span class='line'>found user: Alice
</span><span class='line'>/xxxx/xxxxx/xxxxx/xxxx/message.js:8
</span><span class='line'>    <span class="k">if</span> <span class="o">(</span>auth.enabled<span class="o">(</span>name<span class="o">))</span> console.log<span class="o">(</span><span class="s1">&#39;hello, &#39;</span> + name<span class="o">)</span><span class="p">;</span>
</span><span class='line'>             ^
</span><span class='line'>
</span><span class='line'>TypeError: auth.enabled is not a <span class="k">function</span>
</span></code></pre></td></tr></table></div></figure>


<p>有了之前的分析，错误的原因也就不难分析了：message模块加载时，auth模块还未初始化完成，即此时还未用已经初始化完成的正确对象来覆盖module.exports对象，从临时的空对象里当然就找不到enabled方法。</p>

<h2>循环依赖解决</h2>

<p>那么可不可以“毕其功于一役”，让每个模块既能在加载时就导出正确的对象，同时将模块中的方法定义和实现推移至运行时再动态改变呢？</p>

<h3>前置模块导出</h3>

<p>前置模块导出的方法，可以做到将模块方法的定义和挂载延迟到运行时，而非在模块第一次加载完成后再用一个变量统一覆盖掉module.exports对象(像举例中的传统模块声明方法)。
因此更高效地利用了部分加载的特性，让模块间彼此更加独立、协作更好。对于刚才的问题，具体的优化实现如下。</p>

<figure class='code'><figcaption><span>auth.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">Module</span> <span class="o">=</span> <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">user</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./user&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;# in auth: user is&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">user</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">authenticate</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">user</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">enabled</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Module</span><span class="p">.</span><span class="nx">authenticate</span> <span class="o">=</span> <span class="nx">authenticate</span><span class="p">;</span>
</span><span class='line'><span class="nx">Module</span><span class="p">.</span><span class="nx">enabled</span> <span class="o">=</span> <span class="nx">enabled</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;# auth loaded&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>user.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">Module</span> <span class="o">=</span> <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">message</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./message&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;# in user: message is&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">find</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;found user: &#39;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">message</span><span class="p">.</span><span class="nx">hello</span><span class="p">(</span><span class="nx">name</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Module</span><span class="p">.</span><span class="nx">find</span> <span class="o">=</span> <span class="nx">find</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;# user loaded&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>message.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;use strict&#39;</span><span class="p">;</span>
</span><span class='line'><span class="kr">const</span> <span class="nx">Module</span> <span class="o">=</span> <span class="nx">module</span><span class="p">.</span><span class="nx">exports</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kr">const</span> <span class="nx">auth</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./auth&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;# in message: auth is&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">auth</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">hello</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//console.log(&#39;hello, &#39; + name);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nx">auth</span><span class="p">.</span><span class="nx">enabled</span><span class="p">(</span><span class="nx">name</span><span class="p">))</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;hello, &#39;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Module</span><span class="p">.</span><span class="nx">hello</span> <span class="o">=</span> <span class="nx">hello</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;# message loaded&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>result</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># main starting</span>
</span><span class='line'><span class="c"># in message: auth is</span>
</span><span class='line'><span class="o">{}</span>
</span><span class='line'><span class="c"># message loaded</span>
</span><span class='line'><span class="c"># in user: message is</span>
</span><span class='line'><span class="o">{</span> hello: <span class="o">[</span>Function: hello<span class="o">]</span> <span class="o">}</span>
</span><span class='line'><span class="c"># user loaded</span>
</span><span class='line'><span class="c"># in auth: user is</span>
</span><span class='line'><span class="o">{</span> find: <span class="o">[</span>Function: find<span class="o">]</span> <span class="o">}</span>
</span><span class='line'><span class="c"># auth loaded</span>
</span><span class='line'><span class="c"># in main, auth is</span>
</span><span class='line'><span class="o">{</span> authenticate: <span class="o">[</span>Function: authenticate<span class="o">]</span>,
</span><span class='line'>  enabled: <span class="o">[</span>Function: enabled<span class="o">]</span> <span class="o">}</span>
</span><span class='line'>start running...
</span><span class='line'>found user: Alice
</span><span class='line'>hello, Alice
</span></code></pre></td></tr></table></div></figure>


<p>引用的错误解决，运行正确。</p>

<p>基于这种设计的模块前置导出技术，即“加载时先导出模块、运行时后实现方法”的模块实现思路，可应用于存在多模块间循环依赖引用的情况，从而方便实现逻辑关系更复杂的模块。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker Practice: Storage]]></title>
    <link href="https://www.yangyang.cloud/blog/2016/01/31/docker-practice-storage/"/>
    <updated>2016-01-31T14:03:30+08:00</updated>
    <id>https://www.yangyang.cloud/blog/2016/01/31/docker-practice-storage</id>
    <content type="html"><![CDATA[<h2>Docker基础</h2>

<h3>简介</h3>

<p><a href="https://www.docker.com/what-docker">Docker</a>作为著名的开源容器引擎，在业界有着广泛的使用。
由于使用了现代Linux内核高级特性(如cgroup，namespace)，它可以更高效更安全地使用宿主机的计算、存储、网络等资源。
容器技术作为轻量级的虚拟化技术，相比传统的基于Hypervisor和VM的虚拟化更适合大规模的横向扩展。
容器技术独立与上层应用语言和底层操作系统，将代码和其所依赖的环境整体打包，实现了“构建一次，处处运行”的目标。
在构建应用方面，容器技术可以大大提升运维工作的效率，缩短应用开发上线发布周期，甚至重新定义了软件开发、测试、交付和部署的流程。</p>

<p>本文作为Docker的初级实践总结，描述了Docker的<strong>安装及基本命令</strong>，并以<strong>Redis</strong>和<strong>PostgreSQL</strong>的服务部署为例，记录Docker官方镜像服务部署的过程。</p>

<h3>安装</h3>

<p>在ubuntu 14.04下安装参考<a href="https://docs.docker.com/engine/installation/ubuntulinux/">安装文档</a>，过程如下:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D
</span><span class='line'>sudo su -c "echo 'deb https://apt.dockerproject.org/repo ubuntu-trusty main' &gt; /etc/apt/sources.list.d/docker.list"
</span><span class='line'>sudo apt-get update
</span><span class='line'>sudo apt-get install docker-engine</span></code></pre></td></tr></table></div></figure>


<h4>免sudo执行docker</h4>

<p>将指定用户加入docker组，并重新登录</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo usermod -aG docker $USER</span></code></pre></td></tr></table></div></figure>


<h4>更改docker默认数据目录</h4>

<p>更改<em>/etc/default/docker</em></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DOCKER_OPTS="-g /data/var/lib/docker"</span></code></pre></td></tr></table></div></figure>


<p>重启服务</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo service docker restart</span></code></pre></td></tr></table></div></figure>


<h3>基本操作</h3>

<p>常用启动容器实例模式</p>

<p>后台执行容器 <strong>-d</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker run -d ubuntu /bin/bash -c "vmstat 5"  # docker logs -f 查看输出</span></code></pre></td></tr></table></div></figure>


<p>执行完命令即时删除 <strong>&ndash;rm</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker run --rm ubuntu /bin/bash -c "uname -a"</span></code></pre></td></tr></table></div></figure>


<p>交互式 <strong>-it</strong></p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker run -it ubuntu /bin/bash   # 操作完成后容器停止，可以start，再attach
</span><span class='line'>docker exec -it CONTAINER_NAME /bin/bash # shell到后台运行的容器</span></code></pre></td></tr></table></div></figure>


<p>查看子命令使用: docker help inspect</p>

<p>列出所有运行的容器列表: docker ps</p>

<p>删除所有容器: docker rm $(docker ps -aq)</p>

<p>搜索镜像: <a href="https://hub.docker.com/">https://hub.docker.com/</a></p>

<h2>Redis服务部署</h2>

<p><a href="http://redis.io/">Redis</a>是开源的内存数据结构存储引擎，常用来实现缓存服务、键值存储引擎以及Pub/Sub引擎等。用Docker部署Redis服务非常便捷。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker run --name myapp-redis -p 127.0.0.1:49514:6379 -d redis</span></code></pre></td></tr></table></div></figure>


<p>Docker会做以下工作:</p>

<p>在本地需找官方<a href="https://hub.docker.com/_/redis/">redis官方镜像</a>，如果没有则下载；用官方镜像启动名为<em>myapp-redis</em>的容器实例；将实例开放的默认redis服务6379端口映射到宿主系统的本地49514端口。</p>

<p>查看redis服务的日志</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker logs -f myapp-redis</span></code></pre></td></tr></table></div></figure>


<p>验证:通过宿主系统的redis客户端访问</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>redis-cli -p 49514</span></code></pre></td></tr></table></div></figure>


<h2>PostgreSQL服务部署</h2>

<p><a href="http://www.postgresql.org/">PostgreSQL</a>是开源的关系型数据库。用Docker部署PostgreSQL服务同样直观便捷。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker run --name myapp-postgres -p 127.0.0.1:49513:5432    \
</span><span class='line'>-v $(pwd)/pg-data:/var/lib/postgresql/data                  \
</span><span class='line'>-e POSTGRES_PASSWORD=postgres                               \
</span><span class='line'>-d postgres</span></code></pre></td></tr></table></div></figure>


<p>同样的，docker会下载<a href="https://hub.docker.com/_/postgres/">postgresql官方镜像</a>，启动myapp-postgres实例，并将服务端口映射到宿主机的49513端口。</p>

<p>注意这里用到<strong>-v</strong>参数，可以为容器的volume(数据卷)指定映射目录。
官方的postgresql镜像将<em>/var/lib/postgresql/data/</em>目录作为volume处理，使得单独存储数据变得简单。
可以简单的理解为将<em>$(pwd)/pg-data</em>作为设备挂载到容器的<em>/var/lib/postgresql/data/</em>目录。这样，备份和迁移都很方便，不依赖容器。</p>

<p><strong>-e</strong>参数为创建容器时指定的环境变量，这里将postrgres超级用户的密码设置为postgres。</p>

<p>然后便可以在宿主机通过posgresql的客户端(如psql、createuser、createdb)访问服务了。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># 以postgres超级用户测试数据连接
</span><span class='line'>PGPASSWORD=postgres psql -h localhost -p 49513 -U postgres -e
</span><span class='line'># 创建用户myapp，并设置访问权限(可以创建角色和数据库)及密码
</span><span class='line'>PGPASSWORD=postgres createuser -h localhost -p 49513 -U postgres -rdeP myapp
</span><span class='line'># 以新用户创建同名数据库
</span><span class='line'>PGPASSWORD=myapp-pass createdb -h localhost -p 49513 -U myapp -e myapp</span></code></pre></td></tr></table></div></figure>


<p>官方镜像还支持若干个环境变量，如初始superuser的用户名及密码等等。以下一个命令即可完成以上流程。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>docker run --name myapp-postgres -p 127.0.0.1:49513:5432    \
</span><span class='line'>-v $(pwd)/pg-data:/var/lib/postgresql/data                  \
</span><span class='line'>-e POSTGRES_PASSWORD=myapp-pass -e POSTGRES_USER=myapp      \
</span><span class='line'>-d postgres</span></code></pre></td></tr></table></div></figure>


<h2>总结</h2>

<p>通过以上两个例子，创建了两个容器实例，分别是redis服务和有分离数据卷的postgresql服务。
通过应用Docker容器技术，最核心的是简化测试交付部署流程，并使这些流程更容易地实现自动化。
从而使开发者更多地专注于业务逻辑，加速其价值提升。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Class Inheritance From ES5 to ES6]]></title>
    <link href="https://www.yangyang.cloud/blog/2015/09/10/class-inheritance-from-es5-to-es6/"/>
    <updated>2015-09-10T19:29:24+08:00</updated>
    <id>https://www.yangyang.cloud/blog/2015/09/10/class-inheritance-from-es5-to-es6</id>
    <content type="html"><![CDATA[<h2>Test Case</h2>

<p>For test-driven development, the test case always comes first. The <strong>Phone</strong> inherits the Node.js <strong>EventEmitter</strong>: a phone <strong>is a</strong> customized event emitter, only augmented with its own properties and methods.</p>

<p>A phone has its own <em>name</em>, can <em>powerOn</em> itself.
Since it&rsquo;s an event emitter, it can emit &lsquo;income&rsquo; event, and can set the handler by <em>addListener</em> as event emitter.</p>

<figure class='code'><figcaption><span>test.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">EventEmitter</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;events&#39;</span><span class="p">).</span><span class="nx">EventEmitter</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//var Phone = require(&#39;./phone-es5&#39;);</span>
</span><span class='line'><span class="c1">//var Phone = require(&#39;./phone-util&#39;);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Phone</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;./phone-es6&#39;</span><span class="p">);</span>   <span class="c1">// all implementation should have same interface</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">p1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Phone</span><span class="p">(</span><span class="s1">&#39;p1&#39;</span><span class="p">);</span>             <span class="c1">// class instantiation with parameter</span>
</span><span class='line'><span class="nx">p1</span><span class="p">.</span><span class="nx">powerOn</span><span class="p">();</span>                         <span class="c1">// invoke instance methodl</span>
</span><span class='line'>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">p1</span> <span class="k">instanceof</span> <span class="nx">Phone</span><span class="p">);</span>     <span class="c1">// test ISA object of super class</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">p1</span> <span class="k">instanceof</span> <span class="nx">EventEmitter</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">p1</span><span class="p">);</span>                      <span class="c1">// print instance at run-time</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">incomeListener</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;incomming call from: &#39;</span> <span class="o">+</span> <span class="nx">number</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="nx">p1</span><span class="p">.</span><span class="nx">addListener</span><span class="p">(</span><span class="s1">&#39;income&#39;</span><span class="p">,</span> <span class="nx">incomeListener</span><span class="p">);</span>
</span><span class='line'><span class="nx">p1</span><span class="p">.</span><span class="nx">income</span><span class="p">(</span><span class="s1">&#39;+4478123456&#39;</span><span class="p">);</span>             <span class="c1">// invoke instance method</span>
</span><span class='line'><span class="nx">Phone</span><span class="p">.</span><span class="nx">vendor</span><span class="p">(</span><span class="s1">&#39;xiaomi&#39;</span><span class="p">);</span>               <span class="c1">// static/class method</span>
</span></code></pre></td></tr></table></div></figure>


<p>Expect the following desired output:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Phone instance method] p1 is powered on.
</span><span class='line'>true
</span><span class='line'>true
</span><span class='line'>Phone {
</span><span class='line'>  domain: null,
</span><span class='line'>  _events: {},
</span><span class='line'>  _eventsCount: 0,
</span><span class='line'>  _maxListeners: 20,
</span><span class='line'>  name: 'p1' }
</span><span class='line'>incomming call from: +4478123456
</span><span class='line'>[Phone static method] vendor: xiaomi</span></code></pre></td></tr></table></div></figure>


<h2>Prototype-Based Inheritance in ES5</h2>

<p>In fact, javascript object is prototype-based, there isn&rsquo;t <em>class</em> at all, everything in javascript is object.
There&rsquo;s only <em>Object Extension</em> (extends an exists object to a new object), rather than <em>Class Inheritance</em> (create new subclass that inherits the parent class).
To implement Inheritance is to build/extend the appropriate prototype chain.
The prototype-based inheritance is more flexible, and it&rsquo;s easy to emulate traditional textbook or java-like class or inheritance.</p>

<figure class='code'><figcaption><span>phone-es5.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">EventEmitter</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;events&#39;</span><span class="p">).</span><span class="nx">EventEmitter</span><span class="p">;</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">Phone</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">EventEmitter</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>    <span class="c1">// call parent&#39;s constructor</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">setMaxListeners</span><span class="p">(</span><span class="mi">20</span><span class="p">);</span>   <span class="c1">// customize with parent&#39;s method</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>           <span class="c1">// self field</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">Phone</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EventEmitter</span><span class="p">();</span>
</span><span class='line'><span class="c1">// same as: Phone.prototype = Object.create(EventEmitter.prototype);</span>
</span><span class='line'><span class="nx">Phone</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">=</span> <span class="nx">Phone</span><span class="p">;</span>
</span><span class='line'><span class="nx">Phone</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">powerOn</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;[Phone instance method] &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s1">&#39; is powered on.&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">Phone</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">income</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;income&#39;</span><span class="p">,</span> <span class="nx">number</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">Phone</span><span class="p">.</span><span class="nx">vendor</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;[Phone static method] vendor: &#39;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">Phone</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Using Node.js util.inherits</h2>

<p>Node.js util module provides syntactical sugar for easily implemention of class-like inheritance.</p>

<figure class='code'><figcaption><span>phone-util.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">EventEmitter</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;events&#39;</span><span class="p">).</span><span class="nx">EventEmitter</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">util</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;util&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">Phone</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">EventEmitter</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>    <span class="c1">// call parent&#39;s constructor</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">setMaxListeners</span><span class="p">(</span><span class="mi">20</span><span class="p">);</span>   <span class="c1">// customize with parent&#39;s method</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>           <span class="c1">// self field</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">util</span><span class="p">.</span><span class="nx">inherits</span><span class="p">(</span><span class="nx">Phone</span><span class="p">,</span> <span class="nx">EventEmitter</span><span class="p">);</span>
</span><span class='line'><span class="nx">Phone</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">powerOn</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;[Phone instance method] &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s1">&#39; is powered on.&#39;</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">Phone</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">income</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;income&#39;</span><span class="p">,</span> <span class="nx">number</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">Phone</span><span class="p">.</span><span class="nx">vendor</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;[Phone static method] vendor: &#39;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">Phone</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>util.inherits levarages Object.create() of ES5, the inherits line equals to:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Phone</span><span class="p">.</span><span class="nx">super_</span> <span class="o">=</span> <span class="nx">EventEmitter</span><span class="p">;</span>
</span><span class='line'><span class="nx">Phone</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">EventEmitter</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">constructor</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">value</span><span class="o">:</span> <span class="nx">Phone</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">writable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">configurable</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Class Syntax of ES6</h2>

<p>From node-v4.0, lots of ES6 features are implemented by default(shipping). Such as <em>block scoping</em>, <em>collections</em>, <em>promises</em> and <em>Arrow Functions</em>. And <em>Class</em> syntax is also fully supported. But, note that <em>class</em> is just another syntactical sugar:</p>

<blockquote><p>JavaScript classes are introduced in ECMAScript 6 and are syntactical sugar over JavaScript's existing prototype-based inheritance.<br/>The class syntax is not introducing a new object-oriented inheritance model to JavaScript.<br/>JavaScript classes provide a much simpler and clearer syntax to create objects and deal with inheritance.</p></blockquote>


<p>With <em>class</em> syntax, class/inheritance can be implemented in a more straightforward manner.</p>

<figure class='code'><figcaption><span>phone-es6.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="s1">&#39;use strict&#39;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">EventEmitter</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;events&#39;</span><span class="p">).</span><span class="nx">EventEmitter</span>
</span><span class='line'>
</span><span class='line'><span class="kr">class</span> <span class="nx">Phone</span> <span class="kr">extends</span> <span class="nx">EventEmitter</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">super</span><span class="p">()</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">setMaxListeners</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">powerOn</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;[Phone instance method] &#39;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s1">&#39; is powered on.&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">income</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="s1">&#39;income&#39;</span><span class="p">,</span> <span class="nx">number</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kr">static</span> <span class="nx">vendor</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="err">`</span><span class="p">[</span><span class="nx">Phone</span> <span class="kr">static</span> <span class="nx">method</span><span class="p">]</span> <span class="nx">vendor</span><span class="o">:</span> <span class="nx">$</span><span class="p">{</span><span class="nx">name</span><span class="p">}</span><span class="err">`</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">Phone</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note: &lsquo;use strict&rsquo; is required, and we use the template string syntax in static method (class method).
And <em>class</em> declaration (as well as <em>let</em>, <em>const</em>, and <em>function</em> in strict mode) cannot be hoisted, unlike <em>var</em> and <em>function</em>.</p>

<p>In summary, with ES6 support in Node.js v4.0, class inheritance has never been more easier. So, let&rsquo;s embrace ES6.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSH Port Forwarding]]></title>
    <link href="https://www.yangyang.cloud/blog/2015/08/17/ssh-port-forwarding/"/>
    <updated>2015-08-17T09:29:47+08:00</updated>
    <id>https://www.yangyang.cloud/blog/2015/08/17/ssh-port-forwarding</id>
    <content type="html"><![CDATA[<h2>Overview</h2>

<p>利用SSH端口转发，可以方便实现各类翻墙打洞需求。本文详细介绍SSH端口转发的三种用法，以及其所适用的场景。</p>

<h2>Environment</h2>

<ul>
<li><strong>L0</strong>: localhost behind <em>NAT</em>, with lan ip <strong>192.168.0.100</strong></li>
<li><strong>L1</strong>: host within same lan of L0, with lan ip <strong>192.168.0.101</strong></li>
<li><strong>R0</strong>: remote host (<em>cloud vps</em>) with private ip <strong>10.0.0.100</strong></li>
<li><strong>R1</strong>: remote host (<em>cloud vps</em>) with private ip <strong>10.0.0.101</strong></li>
</ul>


<p>L0 can ssh (default port 22) to R0 by its public domain name <strong>r0.example.com</strong> with public key, like this:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh user@r0.example.com</span></code></pre></td></tr></table></div></figure>


<p><img src="https://www.yangyang.cloud/images/ssh-port-forwarding/0.png" alt="" /></p>

<h2>Forwarding local host (-L)</h2>

<h3>Usage</h3>

<blockquote><p>Specifies that the given port on the local (client) host is to be forwarded to the given host and port on the remote side.</p></blockquote>


<p>SSH -L is good for exposing a remote port locally.</p>

<p>增强本地主机的访问远程主机（局域网）能力。</p>

<h3>Example</h3>

<h4>1. Forward L0 to R0</h4>

<p>The mongod has the http web service, listening only on localhost:28017. With the following command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -NL 28018:localhost:28017 user@r0.example.com</span></code></pre></td></tr></table></div></figure>


<p>Then the remote service on 28017 will be accessed on L0&rsquo;s 28018 port from L0.
<img src="https://www.yangyang.cloud/images/ssh-port-forwarding/1.png" alt="" /></p>

<h4>2. Forward L0 to R1</h4>

<p>Suggest that there&rsquo;s an API server on R1, listening only on port 10030 of lan (10.0.0.0/24).
Because R0 can access R1&rsquo;s private address of the same lan, so the following command will make R1&rsquo;s service of port 10030 accessible from L0&rsquo;s local port 10031.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -NL 10031:10.0.0.101:10030 user@r0.example.com</span></code></pre></td></tr></table></div></figure>


<p>Note, use R1&rsquo;s private ip <em>10.0.0.101</em> instead of <em>localhost</em>.</p>

<p><img src="https://www.yangyang.cloud/images/ssh-port-forwarding/2.png" alt="" /></p>

<h4>3. Forward L1 to R1</h4>

<p>Say R0 can access R1 through ssh command: ssh secret-user@10.0.0.101, then the following command</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -NL 192.168.0.100:2222:10.0.0.101:22 user@r0.example.com</span></code></pre></td></tr></table></div></figure>


<p>will forward L0&rsquo;s port 2222 to the R1&rsquo;s port 22, and even make L0 listening within the lan. So from L1, we can access to R1 by this command:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -p 2222 secret-user@192.168.0.100</span></code></pre></td></tr></table></div></figure>


<p><img src="https://www.yangyang.cloud/images/ssh-port-forwarding/3.png" alt="" />
Awesome!</p>

<h2>Forwarding remote host (-R)</h2>

<h3>Usage</h3>

<blockquote><p>Specifies that the given port on the remote (server) host is to be forwarded to the given host and port on the local side.</p></blockquote>


<p>So the SSH -R can be useful when accessing a box hidden behind a NAT.</p>

<p>增强远端主机的访问本地主机（局域网）的能力。</p>

<h3>Example</h3>

<h4>1. Forward R0 to L0</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -NR 2222:localhost:22 user@r0.example.com</span></code></pre></td></tr></table></div></figure>


<p><img src="https://www.yangyang.cloud/images/ssh-port-forwarding/4.png" alt="" /></p>

<h4>2. Forward R0 to L1</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -NR 2222:192.168.0.101:22 user@r0.example.com</span></code></pre></td></tr></table></div></figure>


<p><img src="https://www.yangyang.cloud/images/ssh-port-forwarding/5.png" alt="" /></p>

<h4>3. Forward R1 to L1</h4>

<p>Unlike local forwarding, remote forwarding from R1 to L1 is not permitted by default due to security policy,
unless we change <em>sshd_config</em> file on <strong>R0</strong>, with the additional config line:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>GatewayPorts = yes</span></code></pre></td></tr></table></div></figure>


<p>then the ultimate tunnel created, with which we can access L1&rsquo;s port on machine R1. Cool?</p>

<h2>Dynamic forwarding (-D)</h2>

<h3>Usage</h3>

<blockquote><p>Specifies a local “dynamic” application-level port forwarding...and ssh will act as a SOCKS server.</p></blockquote>


<h3>Example</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -ND 1080 user@r0.example.com</span></code></pre></td></tr></table></div></figure>


<p>Then, there exists a SOCKS server on L0, and we can use it as a proxy server.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -x socks5h://localhost:1080 https://www.google.com</span></code></pre></td></tr></table></div></figure>


<p><img src="https://www.yangyang.cloud/images/ssh-port-forwarding/7.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shadowsocks Tutorial]]></title>
    <link href="https://www.yangyang.cloud/blog/2015/07/29/shadowsocks-tutorial/"/>
    <updated>2015-07-29T19:37:13+08:00</updated>
    <id>https://www.yangyang.cloud/blog/2015/07/29/shadowsocks-tutorial</id>
    <content type="html"><![CDATA[<h2>Overview</h2>

<h3>socks5</h3>

<p>Socket Secure (SOCKS) is an Internet protocol that routes network packets between a client and server through a proxy server. SOCKS5 additionally provides authentication so only authorized users may access a server.</p>

<p>Practically, a SOCKS server proxies TCP connections to an arbitrary IP address, and provides a means for UDP packets to be forwarded.SOCKS operates at a lower level than HTTP proxying: SOCKS uses a handshake protocol to inform the proxy software about the connection that the client is trying to make, and then acts as transparently as possible. SOCKS proxies can also forward UDP traffic and work in reverse.</p>

<h3>shadowsocks</h3>

<p><a href="https://github.com/shadowsocks/shadowsocks">Shadowsocks</a> is a fast tunnel proxy that can help bypass firewalls.</p>

<h3>test environment</h3>

<p>Remote VPS OS: Ubuntu-14.04 Server VPS on DigitalOcean</p>

<p>Local Client OS: Ubuntu-14.04 Desktop</p>

<h2>Installation</h2>

<h3>install package</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install python-pip
</span><span class='line'>sudo pip install shadowsocks</span></code></pre></td></tr></table></div></figure>


<h3>remote server</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssserver -k PASSWORD -d start</span></code></pre></td></tr></table></div></figure>


<p>This will run shadowsocks remote server listening at <strong>0.0.0.0:8388</strong></p>

<h3>local server</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sslocal -s VPS -k PASSWORD</span></code></pre></td></tr></table></div></figure>


<p>This will run shadowsocks local server listening at <strong>127.0.0.1:1080</strong></p>

<h2>Client Configuration</h2>

<h3>Web Browser</h3>

<p>Thanks for proxy setting extension like <a href="http://getfoxyproxy.org/">FoxyProxy</a> in Firefox, <a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif">SwitchyOmega</a> in Chrome, socks proxy tunnel can be easily configured.</p>

<p>Choose <strong>socks v5</strong> protocal at localhost:1080, and get it work.</p>

<h3>Curl</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -x socks5h://localhost https://www.google.com</span></code></pre></td></tr></table></div></figure>


<p>Note that we specify protocal as <strong>socks5h</strong> instead of socks5, which means we use the specified SOCKS5 proxy, and let the proxy resolve the host name, otherwise it may not resolve hostname. And port 1080 is by default.</p>

<h3>Nodejs Request</h3>

<p><a href="https://www.npmjs.com/package/request">request</a> utility doesn&rsquo;t support socks proxy by default, so we need <a href="https://www.npmjs.com/package/socks5-http-client">socks5-http-client</a> and <a href="https://www.npmjs.com/package/socks5-https-client">socks5-https-client</a> to create agent.</p>

<figure class='code'><figcaption><span>socks-proxy.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;request&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;url&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">socks5HttpAgent</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;socks5-http-client/lib/Agent&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">socks5HttpsAgent</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;socks5-https-client/lib/Agent&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">urlString</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">url</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">urlString</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">agentClass</span> <span class="o">=</span> <span class="p">(</span><span class="nx">url</span><span class="p">.</span><span class="nx">protocol</span> <span class="o">===</span> <span class="s1">&#39;https:&#39;</span><span class="p">)</span> <span class="o">?</span> <span class="nx">socks5HttpsAgent</span> <span class="o">:</span> <span class="nx">socks5HttpAgent</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">agentOptions</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">socksHost</span><span class="o">:</span> <span class="s1">&#39;localhost&#39;</span><span class="p">,</span> <span class="c1">// defaults to localhost</span>
</span><span class='line'>  <span class="nx">socksPort</span><span class="o">:</span> <span class="mi">1080</span>         <span class="c1">// defaults to 1080</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">uri</span><span class="o">:</span> <span class="nx">url</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">agentClass</span><span class="o">:</span> <span class="nx">agentClass</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">agentOptions</span><span class="o">:</span> <span class="nx">agentOptions</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">method</span><span class="o">:</span> <span class="s1">&#39;GET&#39;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">request</span><span class="p">(</span><span class="nx">options</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'>  <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">statusCode</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">body</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Finally, test it.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>node socks-proxy.js http://www.google.com
</span><span class='line'>node socks-proxy.js https://www.google.com</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Session With Express and Nginx]]></title>
    <link href="https://www.yangyang.cloud/blog/2015/07/17/session-with-express-and-nginx/"/>
    <updated>2015-07-17T17:12:56+08:00</updated>
    <id>https://www.yangyang.cloud/blog/2015/07/17/session-with-express-and-nginx</id>
    <content type="html"><![CDATA[<h2>为什么一定要持久化存储会话信息</h2>

<p>如果会话信息仅仅存储在内存&hellip;</p>

<ul>
<li>服务器重启，用户将会登出</li>
<li>无法在多个node进程(或集群环境)中共享会话</li>
</ul>


<p>所以，会话(无论是HTTP会话还是Web-Socket会话)都需要在服务器端持久化存储在数据库中，如Redis/Mongo。</p>

<p>环境： Express 4.12.2， Nginx 1.8.0</p>

<h2>Express添加Redis会话存储</h2>

<p>需要的相关库或组件：</p>

<ul>
<li><a href="https://www.npmjs.com/package/connect-redis">connect-redis</a>: Redis会话存储。</li>
<li><a href="https://www.npmjs.com/package/socket.io-redis">socket.io-redis</a>: 多个socket.io进程实例可以彼此触发/广播事件。</li>
</ul>


<figure class='code'><figcaption><span>app.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">socketio</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;socket.io&#39;</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">session</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;express-session&#39;</span><span class="p">);</span>           <span class="c1">// 会话支持</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">passport</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;passport&#39;</span><span class="p">);</span>                 <span class="c1">// 身份认证，依赖express-session</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">RedisStore</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;connect-redis&#39;</span><span class="p">)(</span><span class="nx">session</span><span class="p">);</span> <span class="c1">// redis存储，用于持久化会话</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">RedisAdapter</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;socket.io-redis&#39;</span><span class="p">);</span>      <span class="c1">// 存储web-socket的连接</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;mongoose&#39;</span><span class="p">);</span>
</span><span class='line'><span class="c1">// ...</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Server</span><span class="p">(</span><span class="nx">app</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">sio</span> <span class="o">=</span> <span class="nx">socketio</span><span class="p">(</span><span class="nx">server</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>配置Redis会话存储HTTP会话</p>

<figure class='code'><figcaption><span>app.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">sessionMiddleware</span> <span class="o">=</span> <span class="nx">session</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">name</span><span class="o">:</span> <span class="s1">&#39;XXX:sess&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">secret</span><span class="o">:</span> <span class="s1">&#39;XXX&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">proxy</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">resave</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">store</span><span class="o">:</span> <span class="k">new</span> <span class="nx">RedisStore</span><span class="p">(),</span>
</span><span class='line'>  <span class="nx">saveUninitialized</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">cookie</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//secure: true, // only https</span>
</span><span class='line'>    <span class="nx">maxAge</span><span class="o">:</span> <span class="mi">7</span><span class="o">*</span><span class="mi">24</span><span class="o">*</span><span class="mi">60</span><span class="o">*</span><span class="mi">60</span><span class="o">*</span><span class="mi">1000</span> <span class="c1">// 1 week</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="c1">// 应用会话存储中间件</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">sessionMiddleware</span><span class="p">);</span>
</span><span class='line'><span class="c1">// passport登录认证</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">passport</span><span class="p">.</span><span class="nx">initialize</span><span class="p">());</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">passport</span><span class="p">.</span><span class="nx">session</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>配置Redis会话存储Web-Socket会话</p>

<figure class='code'><figcaption><span>app.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">sio</span><span class="p">.</span><span class="nx">adapter</span><span class="p">(</span><span class="nx">RedisAdapter</span><span class="p">({</span><span class="nx">host</span><span class="o">:</span> <span class="s1">&#39;localhost&#39;</span><span class="p">,</span> <span class="nx">port</span><span class="o">:</span> <span class="mi">6379</span><span class="p">}));</span>
</span><span class='line'><span class="c1">// 为socket server添加redis存储的中间件</span>
</span><span class='line'><span class="nx">sio</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">socket</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">sessionMiddleware</span><span class="p">(</span><span class="nx">socket</span><span class="p">.</span><span class="nx">request</span><span class="p">,</span> <span class="nx">socket</span><span class="p">.</span><span class="nx">request</span><span class="p">.</span><span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="c1">// 对未登录的用户禁用socket支持</span>
</span><span class='line'><span class="nx">sio</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">socket</span><span class="p">,</span> <span class="nx">next</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">passport</span> <span class="o">=</span> <span class="nx">socket</span><span class="p">.</span><span class="nx">request</span><span class="p">.</span><span class="nx">session</span><span class="p">.</span><span class="nx">passport</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">passport</span> <span class="o">||</span> <span class="o">!</span><span class="nx">passport</span><span class="p">.</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">logger</span><span class="p">.</span><span class="nx">debug</span><span class="p">(</span><span class="s1">&#39;no socket support without login&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">next</span><span class="p">(</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Authentication error&#39;</span><span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="nx">next</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Nginx配置支持负载均衡</h2>

<p>Web-Socket的连接建立需要同一个tcp连接上的多次握手支持，要求比一般的HTTP会话高一些。
所以为实现多进程的共享会话支持，需要配置支持iphash的upstream。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>upstream nodes {
</span><span class='line'>  ip_hash;
</span><span class='line'>  server localhost:8001;
</span><span class='line'>  server localhost:8002;
</span><span class='line'>  server localhost:8003;
</span><span class='line'>  server localhost:8004;
</span><span class='line'>  keepalive 512;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>server{
</span><span class='line'>  listen 443 ssl;
</span><span class='line'>  server_name example.com;
</span><span class='line'>  location / {
</span><span class='line'>    proxy_set_header Upgrade $http_upgrade;
</span><span class='line'>    proxy_set_header Connection "upgrade";
</span><span class='line'>    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
</span><span class='line'>    proxy_set_header Host $host;
</span><span class='line'>    proxy_http_version 1.1;
</span><span class='line'>    proxy_pass http://nodes;
</span><span class='line'>  }
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>注意，可以用pm2启动多个node服务进程，但必须以fork mode启动，而不是-i的集群方式启动，负载均衡完全交给nginx即可。
如此：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>pm2 start -f --name web1 app.js -- 8001
</span><span class='line'>pm2 start -f --name web2 app.js -- 8002
</span><span class='line'>pm2 start -f --name web3 app.js -- 8003
</span><span class='line'>pm2 start -f --name web4 app.js -- 8004</span></code></pre></td></tr></table></div></figure>


<h2>参考资料</h2>

<p><a href="http://socket.io/docs/using-multiple-nodes/">Socket.io doc: using multiple nodes</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Memcache With PHP]]></title>
    <link href="https://www.yangyang.cloud/blog/2015/07/16/installing-memcache-with-php/"/>
    <updated>2015-07-16T20:34:27+08:00</updated>
    <id>https://www.yangyang.cloud/blog/2015/07/16/installing-memcache-with-php</id>
    <content type="html"><![CDATA[<h2>install memcached</h2>

<p>  OS: Ubuntu-14.04 server</p>

<p>  PHP: 5.6.8 source build</p>

<h3>install memcached with apt-get</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo apt-get install memcached</span></code></pre></td></tr></table></div></figure>


<h3>verification</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>echo "stats settings" | nc localhost 11211</span></code></pre></td></tr></table></div></figure>


<h2>install memcache php extension</h2>

<h3>download source from pecl</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>wget http://pecl.php.net/get/memcache-2.2.7.tgz</span></code></pre></td></tr></table></div></figure>


<h3>install with pecl</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/path/to/php/bin/pecl install /path/to/memcache-2.2.7.tgz</span></code></pre></td></tr></table></div></figure>


<p>There exsists the <em>lib/php/extensions/no-debug-non-zts-XXXXXXX/memcache.so</em></p>

<h3>update the <em>php.ini</em></h3>

<p>add &ldquo;extension=memcache.so&rdquo; to php.ini</p>

<h3>reload php-fpm server</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>kill -USR2 $(cat /path/to/php/var/run/php-fpm.pid) # no need sudo</span></code></pre></td></tr></table></div></figure>


<p>Check the php.info page, make sure that memcache section exsists</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blog Writing With Octopress 3]]></title>
    <link href="https://www.yangyang.cloud/blog/2015/07/15/blog-writing-with-octopress-3/"/>
    <updated>2015-07-15T20:38:31+08:00</updated>
    <id>https://www.yangyang.cloud/blog/2015/07/15/blog-writing-with-octopress-3</id>
    <content type="html"><![CDATA[<h2>initialize workspace</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  git clone git@github.com:Pro-YY/pro-yy.github.io.git -b source
</span><span class='line'>  cd pro-yy.github.io/
</span><span class='line'>  git clone git@github.com:Pro-YY/pro-yy.github.io.git -b master _deploy
</span><span class='line'>  apt install ruby-bundler ruby-dev
</span><span class='line'>  bundle install</span></code></pre></td></tr></table></div></figure>


<h2>write post</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  rake new_post["Blog Writing with Octopress 3"]
</span><span class='line'>  vim source/_posts/2015-07-15-blog-writing-with-octopress-3.markdown</span></code></pre></td></tr></table></div></figure>


<h2>preview</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  rake generate
</span><span class='line'>  rake preview</span></code></pre></td></tr></table></div></figure>


<p>preview at <a href="http://localhost:4000">http://localhost:4000</a></p>

<h2>deploy</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  rake deploy</span></code></pre></td></tr></table></div></figure>


<h2>commit source</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  git commit -asm 'new post'
</span><span class='line'>  git push</span></code></pre></td></tr></table></div></figure>


<h2>update octopress</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  git remote add octopress git://github.com/imathis/octopress.git
</span><span class='line'>  git pull octopress master
</span><span class='line'>  bundle install
</span><span class='line'>  rake update_source
</span><span class='line'>  rake update_style</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
