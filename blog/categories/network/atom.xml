<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Network | Brooke's Notes]]></title>
  <link href="https://www.yangyang.cloud/blog/categories/network/atom.xml" rel="self"/>
  <link href="https://www.yangyang.cloud/"/>
  <updated>2018-11-12T23:03:58+08:00</updated>
  <id>https://www.yangyang.cloud/</id>
  <author>
    <name><![CDATA[BrookeYang(杨阳)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Http Load Testing With Wrk2]]></title>
    <link href="https://www.yangyang.cloud/blog/2018/11/05/http-load-testing-with-wrk2/"/>
    <updated>2018-11-05T16:36:47+08:00</updated>
    <id>https://www.yangyang.cloud/blog/2018/11/05/http-load-testing-with-wrk2</id>
    <content type="html"><![CDATA[<h2>Overviews</h2>

<p>How to measure our server&rsquo;s performance?
With this artical, we&rsquo;ll discuss and experiment with HTTP server benchmark.</p>

<p>Let&rsquo;s start to recap some of the key concept related:</p>

<ul>
<li><p>Connection</p>

<p>  The number of simultaneous tcp connections, sometimes refered as <code>Number of Users</code> in other benchmark tools.</p></li>
<li><p>Latency</p>

<p>  For HTTP request, it is the same as the <code>Response Time</code>, measured by <code>ms</code>. And it is tested from clients.
  The latency <code>percentile</code>, like p50/p90/p99, is the most common QoS metric.</p></li>
<li><p>Throughput</p>

<p>  For HTTP request, it&rsquo;s also refered as <code>requests/second</code> or <code>RPS</code> for short. Usually, as the number of connections increases, the system throughput goes down.</p></li>
</ul>


<p>So, what does <code>load testing</code> really mean?</p>

<p>In brief, it&rsquo;s to determine the maximum throughput (the highest RPS), under specified number of connection, with all response time satisfying the latancy target.</p>

<p>Thus, we can remark a server capability like this:</p>

<blockquote><p>&ldquo;Our server instance can achieve 20K RPS under 5K simultaneous connections with latency p99 at less than 200ms.&rdquo;</p></blockquote>

<h2>What&rsquo;s wrk2</h2>

<p><a href="https://github.com/giltene/wrk2">wrk2</a> is an HTTP benchmakring cli tool, which is considered better than <a href="https://httpd.apache.org/docs/2.4/programs/ab.html">ab</a> or <a href="https://github.com/wg/wrk">wrk</a>.
With wrk2, we are able to generate some constant throughput load, and its latency detail is more accrate. As a command-line tool, it&rsquo;s quite convenient and fast.</p>

<ul>
<li>-d: duration, test time. Note that it has a 10 second calibration time, so this should be specified no shorter than 20s.</li>
<li>-t: threads num. Just set it to cpu cores.</li>
<li>-R: or &ndash;rate, expected throughput, the result RPS which is real throughput, will be lower than this value.</li>
<li>-c: connections num. The Number of connections that will be kept open.</li>
</ul>


<h2>SUT simple implementation</h2>

<p>All servers are simple http-server, which simply response <code>Hello, world!\n</code> to clients.</p>

<ul>
<li>Rust 1.28.0 (hyper 0.12)</li>
<li>Go 1.11.1 http module</li>
<li>Node.js 8.11.4</li>
<li>Python 3.5.2 asyncio</li>
</ul>


<h2>Testing Workflow</h2>

<p>Our latency target: <strong>The 99 percentile is less than 200ms.</strong> It&rsquo;s a fairly high performance in real world.</p>

<p>Due to the calibration time of wrk2, all the test last for 30~60 seconds.
And since our test machine has 2 cpu-threads, our command is like:
<code>
./wrk -t2 -c100 -d60 -R 18000 -L http://$HOST:$PORT/
</code>
We iterate to execute the command, and increase the reqeust rate (-R argument) by 500 on each turn until we find the maximum RPS. The whole workflow can be explained as:
<img src="/images/http-load-testing-with-wrk2/hb_wf.svg" alt="" /></p>

<p>Then we go on test for a larger number of connections, until the latancy target is no longer satified or socket connection errors occur. And move to next server.</p>

<h2>Results Analysis</h2>

<p>Now, let&rsquo;s feed our output data to plot program with <a href="https://matplotlib.org/3.0.0/">matplotlib</a>, and finally get the whole picture below:
<img src="/images/http-load-testing-with-wrk2/http_performance_benchmark.svg" alt="" /></p>

<p>The plot is fairly clear. Rust beats Go even in such an I/O intensive scenario, which shows the non-blocking sockets version of hyper really makes something great. Node.js is indeed slower than Go, while Python&rsquo;s default asyncio event loop have a rather poor performance.
As a spoiler alert, for the even more connections (i.e. 5K, 10K&hellip;), both Rust and Go can still hold very well without any socket connection error, though the response time is longer, and Rust still performed better, while the last two may get down.</p>

<h2>Conclusions</h2>

<p>In this post, we managed to benchmark the performance of our web server by using wrk2. And with finite experiment steps, we could determine the server&rsquo;s highest throughput under certain number of connections, which meets the specified latency QoS target.</p>

<h2>References</h2>

<ul>
<li><a href="https://github.com/giltene/wrk2">https://github.com/giltene/wrk2</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/an-introduction-to-load-testing">https://www.digitalocean.com/community/tutorials/an-introduction-to-load-testing</a></li>
<li><a href="https://blog.loadimpact.com/open-source-load-testing-tool-review">https://blog.loadimpact.com/open-source-load-testing-tool-review</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SSH Port Forwarding]]></title>
    <link href="https://www.yangyang.cloud/blog/2015/08/17/ssh-port-forwarding/"/>
    <updated>2015-08-17T09:29:47+08:00</updated>
    <id>https://www.yangyang.cloud/blog/2015/08/17/ssh-port-forwarding</id>
    <content type="html"><![CDATA[<h2>Overview</h2>

<p>利用SSH端口转发，可以方便实现各类翻墙打洞需求。本文详细介绍SSH端口转发的三种用法，以及其所适用的场景。</p>

<h2>Environment</h2>

<ul>
<li><strong>L0</strong>: localhost behind <em>NAT</em>, with lan ip <strong>192.168.0.100</strong></li>
<li><strong>L1</strong>: host within same lan of L0, with lan ip <strong>192.168.0.101</strong></li>
<li><strong>R0</strong>: remote host (<em>cloud vps</em>) with private ip <strong>10.0.0.100</strong></li>
<li><strong>R1</strong>: remote host (<em>cloud vps</em>) with private ip <strong>10.0.0.101</strong></li>
</ul>


<p>L0 can ssh (default port 22) to R0 by its public domain name <strong>r0.example.com</strong> with public key, like this:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh &lt;a href="&#109;&#97;&#105;&#108;&#x74;&#111;&#x3a;&#x75;&#x73;&#x65;&#114;&#x40;&#x72;&#x30;&#x2e;&#101;&#120;&#x61;&#x6d;&#112;&#108;&#x65;&#46;&#x63;&#111;&#109;">&#x75;&#115;&#101;&#x72;&#64;&#114;&#x30;&#46;&#x65;&#120;&#x61;&#109;&#112;&#108;&#x65;&#46;&#x63;&#111;&#109;&lt;/a></span></code></pre></td></tr></table></div></figure></p>

<p><img src="/images/ssh-port-forwarding/0.png" alt="" /></p>

<h2>Forwarding local host (-L)</h2>

<h3>Usage</h3>

<p><blockquote><p>Specifies that the given port on the local (client) host is to be forwarded to the given host and port on the remote side.</p></blockquote></p>

<p>SSH -L is good for exposing a remote port locally.</p>

<p>增强本地主机的访问远程主机（局域网）能力。</p>

<h3>Example</h3>

<h4>1. Forward L0 to R0</h4>

<p>The mongod has the http web service, listening only on localhost:28017. With the following command:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -NL 28018:localhost:28017 &lt;a href="&#109;&#97;&#105;&#x6c;&#116;&#111;&#58;&#x75;&#115;&#x65;&#114;&#x40;&#114;&#48;&#x2e;&#x65;&#120;&#97;&#109;&#x70;&#x6c;&#101;&#46;&#x63;&#111;&#109;">&#117;&#x73;&#x65;&#x72;&#x40;&#x72;&#x30;&#x2e;&#101;&#x78;&#x61;&#109;&#x70;&#108;&#x65;&#x2e;&#x63;&#x6f;&#x6d;&lt;/a></span></code></pre></td></tr></table></div></figure></p>

<p>Then the remote service on 28017 will be accessed on L0&rsquo;s 28018 port from L0.
<img src="/images/ssh-port-forwarding/1.png" alt="" /></p>

<h4>2. Forward L0 to R1</h4>

<p>Suggest that there&rsquo;s an API server on R1, listening only on port 10030 of lan (10.0.0.0/24).
Because R0 can access R1&rsquo;s private address of the same lan, so the following command will make R1&rsquo;s service of port 10030 accessible from L0&rsquo;s local port 10031.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -NL 10031:10.0.0.101:10030 &lt;a href="&#109;&#97;&#105;&#108;&#116;&#x6f;&#x3a;&#x75;&#x73;&#101;&#x72;&#x40;&#x72;&#48;&#46;&#101;&#x78;&#x61;&#x6d;&#112;&#x6c;&#x65;&#46;&#99;&#111;&#109;">&#x75;&#x73;&#x65;&#x72;&#64;&#x72;&#x30;&#46;&#101;&#120;&#x61;&#x6d;&#x70;&#108;&#101;&#46;&#x63;&#x6f;&#x6d;&lt;/a></span></code></pre></td></tr></table></div></figure></p>

<p>Note, use R1&rsquo;s private ip <em>10.0.0.101</em> instead of <em>localhost</em>.</p>

<p><img src="/images/ssh-port-forwarding/2.png" alt="" /></p>

<h4>3. Forward L1 to R1</h4>

<p>Say R0 can access R1 through ssh command: ssh secret-user@10.0.0.101, then the following command</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -NL 192.168.0.100:2222:10.0.0.101:22 &lt;a href="&#x6d;&#x61;&#105;&#108;&#116;&#x6f;&#58;&#x75;&#x73;&#101;&#x72;&#x40;&#x72;&#48;&#46;&#101;&#x78;&#x61;&#109;&#x70;&#x6c;&#101;&#x2e;&#x63;&#x6f;&#x6d;">&#x75;&#x73;&#x65;&#114;&#64;&#114;&#x30;&#x2e;&#x65;&#x78;&#97;&#x6d;&#x70;&#x6c;&#x65;&#46;&#99;&#111;&#x6d;&lt;/a></span></code></pre></td></tr></table></div></figure></p>

<p>will forward L0&rsquo;s port 2222 to the R1&rsquo;s port 22, and even make L0 listening within the lan. So from L1, we can access to R1 by this command:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -p 2222 &lt;a href="&#109;&#x61;&#105;&#x6c;&#x74;&#x6f;&#x3a;&#x73;&#101;&#99;&#114;&#101;&#x74;&#x2d;&#x75;&#x73;&#101;&#x72;&#64;&#x31;&#57;&#x32;&#x2e;&#x31;&#54;&#56;&#46;&#x30;&#46;&#x31;&#48;&#48;">&#115;&#101;&#x63;&#x72;&#x65;&#116;&#45;&#117;&#115;&#101;&#114;&#x40;&#x31;&#x39;&#50;&#x2e;&#49;&#54;&#56;&#x2e;&#48;&#x2e;&#49;&#48;&#x30;&lt;/a></span></code></pre></td></tr></table></div></figure></p>

<p><img src="/images/ssh-port-forwarding/3.png" alt="" />
Awesome!</p>

<h2>Forwarding remote host (-R)</h2>

<h3>Usage</h3>

<p><blockquote><p>Specifies that the given port on the remote (server) host is to be forwarded to the given host and port on the local side.</p></blockquote></p>

<p>So the SSH -R can be useful when accessing a box hidden behind a NAT.</p>

<p>增强远端主机的访问本地主机（局域网）的能力。</p>

<h3>Example</h3>

<h4>1. Forward R0 to L0</h4>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -NR 2222:localhost:22 &lt;a href="&#x6d;&#x61;&#x69;&#108;&#x74;&#x6f;&#58;&#x75;&#x73;&#x65;&#x72;&#x40;&#x72;&#x30;&#46;&#x65;&#x78;&#x61;&#109;&#112;&#108;&#101;&#46;&#99;&#111;&#x6d;">&#117;&#115;&#101;&#x72;&#x40;&#x72;&#48;&#x2e;&#x65;&#120;&#97;&#x6d;&#x70;&#x6c;&#101;&#46;&#x63;&#x6f;&#x6d;&lt;/a></span></code></pre></td></tr></table></div></figure></p>

<p><img src="/images/ssh-port-forwarding/4.png" alt="" /></p>

<h4>2. Forward R0 to L1</h4>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -NR 2222:192.168.0.101:22 &lt;a href="&#x6d;&#97;&#105;&#108;&#116;&#111;&#58;&#117;&#x73;&#x65;&#x72;&#64;&#x72;&#x30;&#46;&#101;&#120;&#x61;&#x6d;&#x70;&#108;&#x65;&#46;&#x63;&#111;&#x6d;">&#x75;&#x73;&#101;&#114;&#64;&#x72;&#48;&#x2e;&#101;&#x78;&#x61;&#109;&#x70;&#108;&#x65;&#46;&#x63;&#x6f;&#x6d;&lt;/a></span></code></pre></td></tr></table></div></figure></p>

<p><img src="/images/ssh-port-forwarding/5.png" alt="" /></p>

<h4>3. Forward R1 to L1</h4>

<p>Unlike local forwarding, remote forwarding from R1 to L1 is not permitted by default due to security policy,
unless we change <em>sshd_config</em> file on <strong>R0</strong>, with the additional config line:
<code>
GatewayPorts = yes
</code>
then the ultimate tunnel created, with which we can access L1&rsquo;s port on machine R1. Cool?</p>

<h2>Dynamic forwarding (-D)</h2>

<h3>Usage</h3>

<p><blockquote><p>Specifies a local “dynamic” application-level port forwarding&hellip;and ssh will act as a SOCKS server.</p></blockquote></p>

<h3>Example</h3>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh -ND 1080 &lt;a href="&#x6d;&#x61;&#105;&#x6c;&#116;&#x6f;&#x3a;&#x75;&#x73;&#x65;&#114;&#x40;&#114;&#x30;&#x2e;&#x65;&#x78;&#x61;&#x6d;&#112;&#x6c;&#101;&#46;&#x63;&#111;&#109;">&#x75;&#115;&#x65;&#114;&#64;&#x72;&#x30;&#46;&#101;&#120;&#x61;&#x6d;&#x70;&#x6c;&#101;&#x2e;&#99;&#x6f;&#109;&lt;/a></span></code></pre></td></tr></table></div></figure>
Then, there exists a SOCKS server on L0, and we can use it as a proxy server.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl -x socks5h://localhost:1080 &lt;a href="https://www.google.com">https://www.google.com&lt;/a></span></code></pre></td></tr></table></div></figure>
<img src="/images/ssh-port-forwarding/7.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Shadowsocks Tutorial]]></title>
    <link href="https://www.yangyang.cloud/blog/2015/07/29/shadowsocks-tutorial/"/>
    <updated>2015-07-29T19:37:13+08:00</updated>
    <id>https://www.yangyang.cloud/blog/2015/07/29/shadowsocks-tutorial</id>
    <content type="html"><![CDATA[<h2>Overview</h2>

<h3>socks5</h3>

<p>Socket Secure (SOCKS) is an Internet protocol that routes network packets between a client and server through a proxy server. SOCKS5 additionally provides authentication so only authorized users may access a server.</p>

<p>Practically, a SOCKS server proxies TCP connections to an arbitrary IP address, and provides a means for UDP packets to be forwarded.SOCKS operates at a lower level than HTTP proxying: SOCKS uses a handshake protocol to inform the proxy software about the connection that the client is trying to make, and then acts as transparently as possible. SOCKS proxies can also forward UDP traffic and work in reverse.</p>

<h3>shadowsocks</h3>

<p><a href="https://github.com/shadowsocks/shadowsocks">Shadowsocks</a> is a fast tunnel proxy that can help bypass firewalls.</p>

<h3>test environment</h3>

<p>Remote VPS OS: Ubuntu-14.04 Server VPS on DigitalOcean</p>

<p>Local Client OS: Ubuntu-14.04 Desktop</p>

<h2>Installation</h2>

<h3>install package</h3>

<pre><code>sudo apt-get install python-pip
sudo pip install shadowsocks
</code></pre>

<h3>remote server</h3>

<pre><code>ssserver -k PASSWORD -d start
</code></pre>

<p>This will run shadowsocks remote server listening at <strong>0.0.0.0:8388</strong></p>

<h3>local server</h3>

<pre><code>sslocal -s VPS -k PASSWORD
</code></pre>

<p>This will run shadowsocks local server listening at <strong>127.0.0.1:1080</strong></p>

<h2>Client Configuration</h2>

<h3>Web Browser</h3>

<p>Thanks for proxy setting extension like <a href="http://getfoxyproxy.org/">FoxyProxy</a> in Firefox, <a href="https://chrome.google.com/webstore/detail/proxy-switchyomega/padekgcemlokbadohgkifijomclgjgif">SwitchyOmega</a> in Chrome, socks proxy tunnel can be easily configured.</p>

<p>Choose <strong>socks v5</strong> protocal at localhost:1080, and get it work.</p>

<h3>Curl</h3>

<pre><code>curl -x socks5h://localhost https://www.google.com
</code></pre>

<p>Note that we specify protocal as <strong>socks5h</strong> instead of socks5, which means we use the specified SOCKS5 proxy, and let the proxy resolve the host name, otherwise it may not resolve hostname. And port 1080 is by default.</p>

<h3>Nodejs Request</h3>

<p><a href="https://www.npmjs.com/package/request">request</a> utility doesn&rsquo;t support socks proxy by default, so we need <a href="https://www.npmjs.com/package/socks5-http-client">socks5-http-client</a> and <a href="https://www.npmjs.com/package/socks5-https-client">socks5-https-client</a> to create agent.</p>

<p><figure class='code'><figcaption><span>socks-proxy.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">request</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">request</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">url</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">socks5HttpAgent</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">socks5</span><span class="o">-</span><span class="nx">http</span><span class="o">-</span><span class="nx">client</span><span class="o">/</span><span class="nx">lib</span><span class="o">/</span><span class="nx">Agent</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">socks5HttpsAgent</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">socks5</span><span class="o">-</span><span class="nx">https</span><span class="o">-</span><span class="nx">client</span><span class="o">/</span><span class="nx">lib</span><span class="o">/</span><span class="nx">Agent</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">urlString</span> <span class="o">=</span> <span class="nx">process</span><span class="p">.</span><span class="nx">argv</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">url</span> <span class="o">=</span> <span class="nx">url</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">urlString</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">agentClass</span> <span class="o">=</span> <span class="p">(</span><span class="nx">url</span><span class="p">.</span><span class="nx">protocol</span> <span class="o">===</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="o">=</span><span class="s2">&quot;https:&quot;</span><span class="o">&gt;</span><span class="nx">https</span><span class="o">:&lt;</span><span class="err">/a&gt;&amp;rsquo;) ? socks5HttpsAgent : socks5HttpAgent;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">agentOptions</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">socksHost</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">localhost</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="c1">// defaults to localhost</span>
</span><span class='line'>  <span class="nx">socksPort</span><span class="o">:</span> <span class="mi">1080</span>         <span class="c1">// defaults to 1080</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">options</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">uri</span><span class="o">:</span> <span class="nx">url</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">agentClass</span><span class="o">:</span> <span class="nx">agentClass</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">agentOptions</span><span class="o">:</span> <span class="nx">agentOptions</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">method</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">GET</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">request</span><span class="p">(</span><span class="nx">options</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">res</span><span class="p">,</span> <span class="nx">body</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">err</span><span class="p">.</span><span class="nx">message</span><span class="p">);</span>
</span><span class='line'>  <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">res</span><span class="p">.</span><span class="nx">statusCode</span><span class="p">);</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">body</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Finally, test it.
<code>
node socks-proxy.js http://www.google.com
node socks-proxy.js https://www.google.com
</code></p>
]]></content>
  </entry>
  
</feed>
