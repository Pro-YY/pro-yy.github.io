<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | Brooke's Notes]]></title>
  <link href="https://www.yangyang.cloud/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="https://www.yangyang.cloud/"/>
  <updated>2020-01-16T10:26:36+08:00</updated>
  <id>https://www.yangyang.cloud/</id>
  <author>
    <name><![CDATA[BrookeYang(杨阳)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Class Inheritance From ES5 to ES6]]></title>
    <link href="https://www.yangyang.cloud/blog/2015/09/10/class-inheritance-from-es5-to-es6/"/>
    <updated>2015-09-10T19:29:24+08:00</updated>
    <id>https://www.yangyang.cloud/blog/2015/09/10/class-inheritance-from-es5-to-es6</id>
    <content type="html"><![CDATA[<h2>Test Case</h2>

<p>For test-driven development, the test case always comes first. The <strong>Phone</strong> inherits the Node.js <strong>EventEmitter</strong>: a phone <strong>is a</strong> customized event emitter, only augmented with its own properties and methods.</p>

<p>A phone has its own <em>name</em>, can <em>powerOn</em> itself.
Since it&rsquo;s an event emitter, it can emit &lsquo;income&rsquo; event, and can set the handler by <em>addListener</em> as event emitter.</p>

<p>{% codeblock lang:javascript test.js %}
var EventEmitter = require(&lsquo;events&rsquo;).EventEmitter;</p>

<p>//var Phone = require(&lsquo;./phone-es5&rsquo;);
//var Phone = require(&lsquo;./phone-util&rsquo;);
var Phone = require(&lsquo;./phone-es6&rsquo;);   // all implementation should have same interface</p>

<p>var p1 = new Phone(&lsquo;p1&rsquo;);             // class instantiation with parameter
p1.powerOn();                         // invoke instance methodl</p>

<p>console.log(p1 instanceof Phone);     // test ISA object of super class
console.log(p1 instanceof EventEmitter);
console.log(p1);                      // print instance at run-time</p>

<p>var incomeListener = function(number) {
    console.log(&lsquo;incomming call from: &rsquo; + number);
};</p>

<p>p1.addListener(&lsquo;income&rsquo;, incomeListener);
p1.income(&lsquo;+4478123456&rsquo;);             // invoke instance method
Phone.vendor(&lsquo;xiaomi&rsquo;);               // static/class method
{% endcodeblock %}</p>

<p>Expect the following desired output:
{% codeblock %}
[Phone instance method] p1 is powered on.
true
true
Phone {
  domain: null,
  <em>events: {},
  </em>eventsCount: 0,
  _maxListeners: 20,
  name: &lsquo;p1&rsquo; }
incomming call from: +4478123456
[Phone static method] vendor: xiaomi
{% endcodeblock %}</p>

<h2>Prototype-Based Inheritance in ES5</h2>

<p>In fact, javascript object is prototype-based, there isn&rsquo;t <em>class</em> at all, everything in javascript is object.
There&rsquo;s only <em>Object Extension</em> (extends an exists object to a new object), rather than <em>Class Inheritance</em> (create new subclass that inherits the parent class).
To implement Inheritance is to build/extend the appropriate prototype chain.
The prototype-based inheritance is more flexible, and it&rsquo;s easy to emulate traditional textbook or java-like class or inheritance.</p>

<p>{% codeblock lang:javascript phone-es5.js %}
var EventEmitter = require(&lsquo;events&rsquo;).EventEmitter;
function Phone(name) {
  EventEmitter.call(this);    // call parent&rsquo;s constructor
  this.setMaxListeners(20);   // customize with parent&rsquo;s method
  this.name = name;           // self field
};
Phone.prototype = new EventEmitter();
// same as: Phone.prototype = Object.create(EventEmitter.prototype);
Phone.prototype.constructor = Phone;
Phone.prototype.powerOn = function() {
  console.log(&lsquo;[Phone instance method] &rsquo; + this.name + &lsquo; is powered on.&rsquo;);
};
Phone.prototype.income = function(number) {
  this.emit(&lsquo;income&rsquo;, number);
};
Phone.vendor = function(name) {
  console.log(&lsquo;[Phone static method] vendor: &rsquo; + name);
}
module.exports = Phone;
{% endcodeblock %}</p>

<h2>Using Node.js util.inherits</h2>

<p>Node.js util module provides syntactical sugar for easily implemention of class-like inheritance.
{% codeblock lang:javascript phone-util.js %}
var EventEmitter = require(&lsquo;events&rsquo;).EventEmitter;
var util = require(&lsquo;util&rsquo;);
function Phone(name) {
  EventEmitter.call(this);    // call parent&rsquo;s constructor
  this.setMaxListeners(20);   // customize with parent&rsquo;s method
  this.name = name;           // self field
};
util.inherits(Phone, EventEmitter);
Phone.prototype.powerOn = function() {
  console.log(&lsquo;[Phone instance method] &rsquo; + this.name + &lsquo; is powered on.&rsquo;);
};
Phone.prototype.income = function(number) {
  this.emit(&lsquo;income&rsquo;, number);
};
Phone.vendor = function(name) {
  console.log(&lsquo;[Phone static method] vendor: &rsquo; + name);
}
module.exports = Phone;
{% endcodeblock %}</p>

<p>util.inherits levarages Object.create() of ES5, the inherits line equals to:</p>

<p>{% codeblock lang:javascript %}
Phone.super_ = EventEmitter;
Phone.prototype = Object.create(EventEmitter.prototype, {
  constructor: {
    value: Phone,
    enumerable: false,
    writable: true,
    configurable: true
  }
});
{% endcodeblock %}</p>

<h2>Class Syntax of ES6</h2>

<p>From node-v4.0, lots of ES6 features are implemented by default(shipping). Such as <em>block scoping</em>, <em>collections</em>, <em>promises</em> and <em>Arrow Functions</em>. And <em>Class</em> syntax is also fully supported. But, note that <em>class</em> is just another syntactical sugar:</p>

<p>{% blockquote %}
JavaScript classes are introduced in ECMAScript 6 and are syntactical sugar over JavaScript&rsquo;s existing prototype-based inheritance.
The class syntax is not introducing a new object-oriented inheritance model to JavaScript.
JavaScript classes provide a much simpler and clearer syntax to create objects and deal with inheritance.
{% endblockquote %}</p>

<p>With <em>class</em> syntax, class/inheritance can be implemented in a more straightforward manner.</p>

<p>{% codeblock lang:javascript phone-es6.js %}
&lsquo;use strict&rsquo;
var EventEmitter = require(&lsquo;events&rsquo;).EventEmitter</p>

<p>class Phone extends EventEmitter {
  constructor(name) {
    super()
    this.setMaxListeners(20)
    this.name = name
  }
  powerOn() {
    console.log(&lsquo;[Phone instance method] &rsquo; + this.name + &lsquo; is powered on.&rsquo;)
  }
  income(number) {
    this.emit(&lsquo;income&rsquo;, number)
  }
  static vendor(name) {
    console.log(<code>[Phone static method] vendor: ${name}</code>)
  }
}</p>

<p>module.exports = Phone
{% endcodeblock %}</p>

<p>Note: &lsquo;use strict&rsquo; is required, and we use the template string syntax in static method (class method).
And <em>class</em> declaration (as well as <em>let</em>, <em>const</em>, and <em>function</em> in strict mode) cannot be hoisted, unlike <em>var</em> and <em>function</em>.</p>

<p>In summary, with ES6 support in Node.js v4.0, class inheritance has never been more easier. So, let&rsquo;s embrace ES6.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Session With Express and Nginx]]></title>
    <link href="https://www.yangyang.cloud/blog/2015/07/17/session-with-express-and-nginx/"/>
    <updated>2015-07-17T17:12:56+08:00</updated>
    <id>https://www.yangyang.cloud/blog/2015/07/17/session-with-express-and-nginx</id>
    <content type="html"><![CDATA[<h2>为什么一定要持久化存储会话信息</h2>

<p>如果会话信息仅仅存储在内存&hellip;</p>

<ul>
<li>服务器重启，用户将会登出</li>
<li>无法在多个node进程(或集群环境)中共享会话</li>
</ul>


<p>所以，会话(无论是HTTP会话还是Web-Socket会话)都需要在服务器端持久化存储在数据库中，如Redis/Mongo。</p>

<p>环境： Express 4.12.2， Nginx 1.8.0</p>

<h2>Express添加Redis会话存储</h2>

<p>需要的相关库或组件：</p>

<ul>
<li><a href="https://www.npmjs.com/package/connect-redis">connect-redis</a>: Redis会话存储。</li>
<li><a href="https://www.npmjs.com/package/socket.io-redis">socket.io-redis</a>: 多个socket.io进程实例可以彼此触发/广播事件。</li>
</ul>


<pre><code>var http = require('http');
var socketio = require('socket.io');
var session = require('express-session');           // 会话支持
var passport = require('passport');                 // 身份认证，依赖express-session
var RedisStore = require('connect-redis')(session); // redis存储，用于持久化会话
var RedisAdapter = require('socket.io-redis');      // 存储web-socket的连接
var mongoose = require('mongoose');
// ...
var app = express();
var server = http.Server(app);
var sio = socketio(server);
</code></pre>

<p>配置Redis会话存储HTTP会话
<code>
var sessionMiddleware = session({
  name: 'XXX:sess',
  secret: 'XXX',
  proxy: true,
  resave: false,
  store: new RedisStore(),
  saveUninitialized: false,
  cookie: {
    //secure: true, // only https
    maxAge: 7*24*60*60*1000 // 1 week
  }
});
// 应用会话存储中间件
app.use(sessionMiddleware);
// passport登录认证
app.use(passport.initialize());
app.use(passport.session());
</code></p>

<p>配置Redis会话存储Web-Socket会话
<code>
sio.adapter(RedisAdapter({host: 'localhost', port: 6379}));
// 为socket server添加redis存储的中间件
sio.use(function(socket, next) {
  sessionMiddleware(socket.request, socket.request.res, next);
});
// 对未登录的用户禁用socket支持
sio.use(function(socket, next){
  var passport = socket.request.session.passport;
  if (!passport || !passport.user) {
    logger.debug('no socket support without login');
    next(new Error('Authentication error'));
  }
  else next();
});
</code></p>

<h2>Nginx配置支持负载均衡</h2>

<p>Web-Socket的连接建立需要同一个tcp连接上的多次握手支持，要求比一般的HTTP会话高一些。
所以为实现多进程的共享会话支持，需要配置支持iphash的upstream。</p>

<pre><code>upstream nodes {
  ip_hash;
  server localhost:8001;
  server localhost:8002;
  server localhost:8003;
  server localhost:8004;
  keepalive 512;
}

server{
  listen 443 ssl;
  server_name example.com;
  location / {
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $host;
    proxy_http_version 1.1;
    proxy_pass http://nodes;
  }
}
</code></pre>

<p>注意，可以用pm2启动多个node服务进程，但必须以fork mode启动，而不是-i的集群方式启动，负载均衡完全交给nginx即可。
如此：
<code>
pm2 start -f --name web1 app.js -- 8001
pm2 start -f --name web2 app.js -- 8002
pm2 start -f --name web3 app.js -- 8003
pm2 start -f --name web4 app.js -- 8004
</code></p>

<h2>参考资料</h2>

<p><a href="http://socket.io/docs/using-multiple-nodes/">Socket.io doc: using multiple nodes</a></p>
]]></content>
  </entry>
  
</feed>
