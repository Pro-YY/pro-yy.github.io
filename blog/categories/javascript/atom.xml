<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | Brooke's Notes]]></title>
  <link href="https://www.yangyang.cloud/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="https://www.yangyang.cloud/"/>
  <updated>2018-11-14T16:45:09+08:00</updated>
  <id>https://www.yangyang.cloud/</id>
  <author>
    <name><![CDATA[BrookeYang(杨阳)]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Class Inheritance From ES5 to ES6]]></title>
    <link href="https://www.yangyang.cloud/blog/2015/09/10/class-inheritance-from-es5-to-es6/"/>
    <updated>2015-09-10T19:29:24+08:00</updated>
    <id>https://www.yangyang.cloud/blog/2015/09/10/class-inheritance-from-es5-to-es6</id>
    <content type="html"><![CDATA[<h2>Test Case</h2>

<p>For test-driven development, the test case always comes first. The <strong>Phone</strong> inherits the Node.js <strong>EventEmitter</strong>: a phone <strong>is a</strong> customized event emitter, only augmented with its own properties and methods.</p>

<p>A phone has its own <em>name</em>, can <em>powerOn</em> itself.
Since it&rsquo;s an event emitter, it can emit &lsquo;income&rsquo; event, and can set the handler by <em>addListener</em> as event emitter.</p>

<p><figure class='code'><figcaption><span>test.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">EventEmitter</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">events</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;).</span><span class="nx">EventEmitter</span><span class="p">;</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">//var Phone = require(&amp;lsquo;./phone-es5&amp;rsquo;);</span>
</span><span class='line'><span class="c1">//var Phone = require(&amp;lsquo;./phone-util&amp;rsquo;);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">Phone</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;.</span><span class="o">/</span><span class="nx">phone</span><span class="o">-</span><span class="nx">es6</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>   <span class="c1">// all implementation should have same interface&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">p1</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Phone</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">p1</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>             <span class="c1">// class instantiation with parameter</span>
</span><span class='line'><span class="nx">p1</span><span class="p">.</span><span class="nx">powerOn</span><span class="p">();</span>                         <span class="c1">// invoke instance methodl&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">p1</span> <span class="k">instanceof</span> <span class="nx">Phone</span><span class="p">);</span>     <span class="c1">// test ISA object of super class</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">p1</span> <span class="k">instanceof</span> <span class="nx">EventEmitter</span><span class="p">);</span>
</span><span class='line'><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">p1</span><span class="p">);</span>                      <span class="c1">// print instance at run-time&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kd">var</span> <span class="nx">incomeListener</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">incomming</span> <span class="nx">call</span> <span class="nx">from</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span> <span class="o">+</span> <span class="nx">number</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">p1</span><span class="p">.</span><span class="nx">addListener</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">income</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="nx">incomeListener</span><span class="p">);</span>
</span><span class='line'><span class="nx">p1</span><span class="p">.</span><span class="nx">income</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="o">+</span><span class="mi">4478123456</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>             <span class="c1">// invoke instance method</span>
</span><span class='line'><span class="nx">Phone</span><span class="p">.</span><span class="nx">vendor</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">xiaomi</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>               <span class="c1">// static/class method</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Expect the following desired output:
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Phone instance method] p1 is powered on.
</span><span class='line'>true
</span><span class='line'>true
</span><span class='line'>Phone {
</span><span class='line'>  domain: null,
</span><span class='line'>  &lt;em>events: {},
</span><span class='line'>  &lt;/em>eventsCount: 0,
</span><span class='line'>  _maxListeners: 20,
</span><span class='line'>  name: &lsquo;p1&rsquo; }
</span><span class='line'>incomming call from: +4478123456
</span><span class='line'>[Phone static method] vendor: xiaomi</span></code></pre></td></tr></table></div></figure></p>

<h2>Prototype-Based Inheritance in ES5</h2>

<p>In fact, javascript object is prototype-based, there isn&rsquo;t <em>class</em> at all, everything in javascript is object.
There&rsquo;s only <em>Object Extension</em> (extends an exists object to a new object), rather than <em>Class Inheritance</em> (create new subclass that inherits the parent class).
To implement Inheritance is to build/extend the appropriate prototype chain.
The prototype-based inheritance is more flexible, and it&rsquo;s easy to emulate traditional textbook or java-like class or inheritance.</p>

<p><figure class='code'><figcaption><span>phone-es5.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">EventEmitter</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">events</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;).</span><span class="nx">EventEmitter</span><span class="p">;</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">Phone</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">EventEmitter</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>    <span class="c1">// call parent&amp;rsquo;s constructor</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">setMaxListeners</span><span class="p">(</span><span class="mi">20</span><span class="p">);</span>   <span class="c1">// customize with parent&amp;rsquo;s method</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>           <span class="c1">// self field</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">Phone</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">EventEmitter</span><span class="p">();</span>
</span><span class='line'><span class="c1">// same as: Phone.prototype = Object.create(EventEmitter.prototype);</span>
</span><span class='line'><span class="nx">Phone</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">=</span> <span class="nx">Phone</span><span class="p">;</span>
</span><span class='line'><span class="nx">Phone</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">powerOn</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;[</span><span class="nx">Phone</span> <span class="nx">instance</span> <span class="nx">method</span><span class="p">]</span> <span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span> <span class="nx">is</span> <span class="nx">powered</span> <span class="nx">on</span><span class="p">.</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">Phone</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">income</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">income</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="nx">number</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">Phone</span><span class="p">.</span><span class="nx">vendor</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;[</span><span class="nx">Phone</span> <span class="kr">static</span> <span class="nx">method</span><span class="p">]</span> <span class="nx">vendor</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">Phone</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Using Node.js util.inherits</h2>

<p>Node.js util module provides syntactical sugar for easily implemention of class-like inheritance.
<figure class='code'><figcaption><span>phone-util.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">EventEmitter</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">events</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;).</span><span class="nx">EventEmitter</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">util</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">util</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
</span><span class='line'><span class="kd">function</span> <span class="nx">Phone</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">EventEmitter</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>    <span class="c1">// call parent&amp;rsquo;s constructor</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">setMaxListeners</span><span class="p">(</span><span class="mi">20</span><span class="p">);</span>   <span class="c1">// customize with parent&amp;rsquo;s method</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>           <span class="c1">// self field</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">util</span><span class="p">.</span><span class="nx">inherits</span><span class="p">(</span><span class="nx">Phone</span><span class="p">,</span> <span class="nx">EventEmitter</span><span class="p">);</span>
</span><span class='line'><span class="nx">Phone</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">powerOn</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;[</span><span class="nx">Phone</span> <span class="nx">instance</span> <span class="nx">method</span><span class="p">]</span> <span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span> <span class="nx">is</span> <span class="nx">powered</span> <span class="nx">on</span><span class="p">.</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">Phone</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">income</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">income</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="nx">number</span><span class="p">);</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="nx">Phone</span><span class="p">.</span><span class="nx">vendor</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;[</span><span class="nx">Phone</span> <span class="kr">static</span> <span class="nx">method</span><span class="p">]</span> <span class="nx">vendor</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">Phone</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>util.inherits levarages Object.create() of ES5, the inherits line equals to:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">Phone</span><span class="p">.</span><span class="nx">super_</span> <span class="o">=</span> <span class="nx">EventEmitter</span><span class="p">;</span>
</span><span class='line'><span class="nx">Phone</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">EventEmitter</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">constructor</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">value</span><span class="o">:</span> <span class="nx">Phone</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">enumerable</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">writable</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">configurable</span><span class="o">:</span> <span class="kc">true</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Class Syntax of ES6</h2>

<p>From node-v4.0, lots of ES6 features are implemented by default(shipping). Such as <em>block scoping</em>, <em>collections</em>, <em>promises</em> and <em>Arrow Functions</em>. And <em>Class</em> syntax is also fully supported. But, note that <em>class</em> is just another syntactical sugar:</p>

<p><blockquote><p>JavaScript classes are introduced in ECMAScript 6 and are syntactical sugar over JavaScript&rsquo;s existing prototype-based inheritance.<br/>The class syntax is not introducing a new object-oriented inheritance model to JavaScript.<br/>JavaScript classes provide a much simpler and clearer syntax to create objects and deal with inheritance.</p></blockquote></p>

<p>With <em>class</em> syntax, class/inheritance can be implemented in a more straightforward manner.</p>

<p><figure class='code'><figcaption><span>phone-es6.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">use</span> <span class="nx">strict</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">EventEmitter</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">events</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;).</span><span class="nx">EventEmitter</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="kr">class</span> <span class="nx">Phone</span> <span class="kr">extends</span> <span class="nx">EventEmitter</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">constructor</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kr">super</span><span class="p">()</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">setMaxListeners</span><span class="p">(</span><span class="mi">20</span><span class="p">)</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">powerOn</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;[</span><span class="nx">Phone</span> <span class="nx">instance</span> <span class="nx">method</span><span class="p">]</span> <span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span> <span class="nx">is</span> <span class="nx">powered</span> <span class="nx">on</span><span class="p">.</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="nx">income</span><span class="p">(</span><span class="nx">number</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">emit</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">income</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="nx">number</span><span class="p">)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kr">static</span> <span class="nx">vendor</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="o">&lt;</span><span class="nx">code</span><span class="o">&gt;</span><span class="p">[</span><span class="nx">Phone</span> <span class="kr">static</span> <span class="nx">method</span><span class="p">]</span> <span class="nx">vendor</span><span class="o">:</span> <span class="nx">$</span><span class="p">{</span><span class="nx">name</span><span class="p">}</span><span class="o">&lt;</span><span class="err">/code&gt;)</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;</span><span class="err">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">module</span><span class="p">.</span><span class="nx">exports</span> <span class="o">=</span> <span class="nx">Phone</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Note: &lsquo;use strict&rsquo; is required, and we use the template string syntax in static method (class method).
And <em>class</em> declaration (as well as <em>let</em>, <em>const</em>, and <em>function</em> in strict mode) cannot be hoisted, unlike <em>var</em> and <em>function</em>.</p>

<p>In summary, with ES6 support in Node.js v4.0, class inheritance has never been more easier. So, let&rsquo;s embrace ES6.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Session With Express and Nginx]]></title>
    <link href="https://www.yangyang.cloud/blog/2015/07/17/session-with-express-and-nginx/"/>
    <updated>2015-07-17T17:12:56+08:00</updated>
    <id>https://www.yangyang.cloud/blog/2015/07/17/session-with-express-and-nginx</id>
    <content type="html"><![CDATA[<h2>为什么一定要持久化存储会话信息</h2>

<p>如果会话信息仅仅存储在内存&hellip;</p>

<ul>
<li>服务器重启，用户将会登出</li>
<li>无法在多个node进程(或集群环境)中共享会话</li>
</ul>


<p>所以，会话(无论是HTTP会话还是Web-Socket会话)都需要在服务器端持久化存储在数据库中，如Redis/Mongo。</p>

<p>环境： Express 4.12.2， Nginx 1.8.0</p>

<h2>Express添加Redis会话存储</h2>

<p>需要的相关库或组件：</p>

<ul>
<li><a href="https://www.npmjs.com/package/connect-redis">connect-redis</a>: Redis会话存储。</li>
<li><a href="https://www.npmjs.com/package/socket.io-redis">socket.io-redis</a>: 多个socket.io进程实例可以彼此触发/广播事件。</li>
</ul>


<p><figure class='code'><figcaption><span>app.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">http</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">socketio</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">socket</span><span class="p">.</span><span class="nx">io</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">session</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">express</span><span class="o">-</span><span class="nx">session</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>           <span class="c1">// 会话支持</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">passport</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">passport</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>                 <span class="c1">// 身份认证，依赖express-session</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">RedisStore</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">connect</span><span class="o">-</span><span class="nx">redis</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;)(</span><span class="nx">session</span><span class="p">);</span> <span class="c1">// redis存储，用于持久化会话</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">RedisAdapter</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">socket</span><span class="p">.</span><span class="nx">io</span><span class="o">-</span><span class="nx">redis</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>      <span class="c1">// 存储web-socket的连接</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">mongoose</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
</span><span class='line'><span class="c1">// &amp;hellip;</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="nx">express</span><span class="p">();</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">server</span> <span class="o">=</span> <span class="nx">http</span><span class="p">.</span><span class="nx">Server</span><span class="p">(</span><span class="nx">app</span><span class="p">);</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">sio</span> <span class="o">=</span> <span class="nx">socketio</span><span class="p">(</span><span class="nx">server</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>配置Redis会话存储HTTP会话
<figure class='code'><figcaption><span>app.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">sessionMiddleware</span> <span class="o">=</span> <span class="nx">session</span><span class="p">({</span>
</span><span class='line'>  <span class="nx">name</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">XXX</span><span class="o">:</span><span class="nx">sess</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span>
</span><span class='line'>  <span class="nx">secret</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">XXX</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span>
</span><span class='line'>  <span class="nx">proxy</span><span class="o">:</span> <span class="kc">true</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">resave</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">store</span><span class="o">:</span> <span class="k">new</span> <span class="nx">RedisStore</span><span class="p">(),</span>
</span><span class='line'>  <span class="nx">saveUninitialized</span><span class="o">:</span> <span class="kc">false</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">cookie</span><span class="o">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">//secure: true, // only https</span>
</span><span class='line'>    <span class="nx">maxAge</span><span class="o">:</span> <span class="mi">7</span><span class="o">&lt;</span><span class="nx">em</span><span class="o">&gt;</span><span class="mi">24</span><span class="o">&lt;</span><span class="err">/em&gt;60&lt;em&gt;60&lt;/em&gt;1000 // 1 week</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="c1">// 应用会话存储中间件</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">sessionMiddleware</span><span class="p">);</span>
</span><span class='line'><span class="c1">// passport登录认证</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">passport</span><span class="p">.</span><span class="nx">initialize</span><span class="p">());</span>
</span><span class='line'><span class="nx">app</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="nx">passport</span><span class="p">.</span><span class="nx">session</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>配置Redis会话存储Web-Socket会话
<figure class='code'><figcaption><span>app.js </span></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">sio</span><span class="p">.</span><span class="nx">adapter</span><span class="p">(</span><span class="nx">RedisAdapter</span><span class="p">({</span><span class="nx">host</span><span class="o">:</span> <span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">localhost</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;,</span> <span class="nx">port</span><span class="o">:</span> <span class="mi">6379</span><span class="p">}));</span>
</span><span class='line'><span class="c1">// 为socket server添加redis存储的中间件</span>
</span><span class='line'><span class="nx">sio</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">socket</span><span class="p">,</span> <span class="nx">next</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">sessionMiddleware</span><span class="p">(</span><span class="nx">socket</span><span class="p">.</span><span class="nx">request</span><span class="p">,</span> <span class="nx">socket</span><span class="p">.</span><span class="nx">request</span><span class="p">.</span><span class="nx">res</span><span class="p">,</span> <span class="nx">next</span><span class="p">);</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'><span class="c1">// 对未登录的用户禁用socket支持</span>
</span><span class='line'><span class="nx">sio</span><span class="p">.</span><span class="nx">use</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">socket</span><span class="p">,</span> <span class="nx">next</span><span class="p">){</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">passport</span> <span class="o">=</span> <span class="nx">socket</span><span class="p">.</span><span class="nx">request</span><span class="p">.</span><span class="nx">session</span><span class="p">.</span><span class="nx">passport</span><span class="p">;</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">passport</span> <span class="o">||</span> <span class="o">!</span><span class="nx">passport</span><span class="p">.</span><span class="nx">user</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">logger</span><span class="p">.</span><span class="nx">debug</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">no</span> <span class="nx">socket</span> <span class="nx">support</span> <span class="nx">without</span> <span class="nx">login</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;);</span>
</span><span class='line'>    <span class="nx">next</span><span class="p">(</span><span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lsquo</span><span class="p">;</span><span class="nx">Authentication</span> <span class="nx">error</span><span class="o">&amp;</span><span class="nx">rsquo</span><span class="p">;));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">else</span> <span class="nx">next</span><span class="p">();</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Nginx配置支持负载均衡</h2>

<p>Web-Socket的连接建立需要同一个tcp连接上的多次握手支持，要求比一般的HTTP会话高一些。
所以为实现多进程的共享会话支持，需要配置支持iphash的upstream。</p>

<pre><code>upstream nodes {
  ip_hash;
  server localhost:8001;
  server localhost:8002;
  server localhost:8003;
  server localhost:8004;
  keepalive 512;
}

server{
  listen 443 ssl;
  server_name example.com;
  location / {
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header Host $host;
    proxy_http_version 1.1;
    proxy_pass http://nodes;
  }
}
</code></pre>

<p>注意，可以用pm2启动多个node服务进程，但必须以fork mode启动，而不是-i的集群方式启动，负载均衡完全交给nginx即可。
如此：
<code>
pm2 start -f --name web1 app.js -- 8001
pm2 start -f --name web2 app.js -- 8002
pm2 start -f --name web3 app.js -- 8003
pm2 start -f --name web4 app.js -- 8004
</code></p>

<h2>参考资料</h2>

<p><a href="http://socket.io/docs/using-multiple-nodes/">Socket.io doc: using multiple nodes</a></p>
]]></content>
  </entry>
  
</feed>
